1 — Re‑confirm the root cause in 30 seconds
Add a one‑liner just above app.use(session(…)) in server/index.ts:

ts
Copy
Edit
console.log("⏱️  Session store is", sessionStore.constructor.name);
Boot the repl → watch the console.

Click Calendar, wait until the second /me call.

If you now see two different lines, e.g.

pgsql
Copy
Edit
⏱️  Session store is PgSession
⏱️  Session store is MemoryStore         ← second request
the store is still swapping, exactly as before.

2 — Why the patch you tried hasn’t taken effect
storage: "hybrid" in the health response means your old
getSessionStore() logic is still wired in.

In Replit hot‑reload mode the server process doesn’t restart when you edit
files that Vite owns, so you have to stop / restart the repl (or kill the
node process) after changing server/index.ts.

There may be two copies of express() in the repo (/server/index.ts
and /apps/api/index.ts). Make sure you edited the one that actually runs.

3 — Guaranteed fix (single point of truth)
Below is a full replacement for the session section; drop‑in, restart, test.
It removes every trace of “hybrid” switching and forces a single store at boot:

ts
Copy
Edit
// ─── server/index.ts ─────────────────────────────────────────────────────────
import session from "express-session";
import MemoryStoreFn from "memorystore";
import connectPg from "connect-pg-simple";
import { pool } from "./database";          // your pg Pool

const MemoryStore = MemoryStoreFn(session);
const PgSession = connectPg(session);

// Decide once, never change:
const useMemory =
  process.env.USE_MEMORY_SESSIONS === "true" || process.env.NODE_ENV !== "production";

const sessionStore = useMemory
  ? new MemoryStore({ checkPeriod: 86400000 })               // memory
  : new PgSession({ pool, tableName: "session" });           // postgres

console.log("▶ Using", useMemory ? "MemoryStore" : "PgSession", "for sessions");

app.use(
  session({
    store: sessionStore,
    secret: process.env.SESSION_SECRET || "dlf‑dev‑secret",
    name: "dlf.sid",
    resave: false,
    saveUninitialized: false,
    rolling: true,
    cookie: {
      secure: process.env.NODE_ENV === "production",
      sameSite: "lax",
      httpOnly: true,
      maxAge: 7 * 24 * 60 * 60 * 1000,        // 7 days
    },
  }),
);
Delete any call sites of getSessionStore() and the file itself so nobody can
re‑introduce the swap.

4 — Verify with an integration test
ts
Copy
Edit
import request from "supertest";
import { app } from "../index";

describe("auth persistence", () => {
  it("stays logged in across multiple requests", async () => {
    const agent = request.agent(app);                     // keeps cookies

    await agent
      .post("/api/auth/login")
      .send({ username: "test", password: "secret" })
      .expect(200);

    await agent.get("/api/auth/me").expect(200);          // first /me

    await new Promise(r => setTimeout(r, 5000));          // wait 5 s

    await agent.get("/api/auth/me").expect(200);          // stays 200
  });
});
Run it with pnpm test; once it passes you’ve eliminated the bug
permanently and protected against regressions.

