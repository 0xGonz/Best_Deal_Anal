‚úÖ Why This Is a Modular & Scalable Solution
1. Centralized Label Mapping
By defining all document type labels in one file:

ts
Copy
Edit
export const DOCUMENT_TYPE_LABELS: Record<string, string> = {
  pitch_deck: "Pitch Deck",
  financial_model: "Financial Model",
  legal_document: "Legal Document",
  investor_update: "Investor Update",
  diligence_report: "Diligence Report",
  other: "Other"
};
You achieve:

Single source of truth (no repeated switch/case blocks across components)

Easy to extend (just add a new key when backend adds a new documentType)

Consistent UI (everything uses the same mapping)

2. Pure Function for Label Lookup
ts
Copy
Edit
export function getDocumentTypeLabel(type: string): string {
  return DOCUMENT_TYPE_LABELS[type] || "Documents";
}
Why it‚Äôs good:

Pure function = predictable output

Reusable in any component

Works whether type comes from local state, API, or props

3. Backend-Aligned Values
This approach respects the backend enum values (like legal_document, investor_update, etc.). So it‚Äôs:

Future-proof if you align it with DB schema

Safe against typos (you could even enforce it with a TypeScript enum or union type)

üß± Scalability Enhancements (Optional)
To go further:

üîí Type safety: use a DocumentType union type:

ts
Copy
Edit
export type DocumentType =
  | "pitch_deck"
  | "financial_model"
  | "legal_document"
  | "investor_update"
  | "diligence_report"
  | "other";
This prevents bugs like 'docment' or 'legal-doc'.

üåê i18n-ready: if internationalization is needed, wrap labels in a translation function:

ts
Copy
Edit
getDocumentTypeLabel = (type) => t(DOCUMENT_TYPE_LABELS[type] || 'Documents');
üß™ Unit test the function:

ts
Copy
Edit
test("should return 'Legal Document' for 'legal_document'", () => {
  expect(getDocumentTypeLabel("legal_document")).toBe("Legal Document");
});
‚ùå What NOT to Do
Don‚Äôt hardcode labels in multiple components ("Pitch Deck", "Other", etc.)

Don‚Äôt use fallback "Documents" in UI without logging (silently hiding bugs)

Don‚Äôt map server enums in multiple places ‚Äî centralize

‚úÖ Final Verdict
Yes, this solution is modular, scalable, and best practice for:

UI consistency

Developer ergonomics

Long-term maintainability