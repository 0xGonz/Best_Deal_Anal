Why clicking Calendar boots you back to Login
Calendar → /api/capital‑calls hits requireAuth
Capital Calls is the only Calendar API that is guarded by requireAuth (see server/routes/capital‑calls.ts).

requireAuth looks for req.session.userId.
On this request the session object is suddenly empty, so it throws a 401.
Your <ProtectedRoute> sees user === null and redirects to /login, which feels like a “logout”.

The session vanished because the server silently switched session stores between requests.

In server/index.ts you wrap every request with

ts
Copy
Edit
session({
  store: getSessionStore(),   // 👈 dynamic
  /* … */
})
getSessionStore() returns PgSession or the in‑memory MemoryStore dynamically, based on two heuristics:

ts
Copy
Edit
if (hybridStorage.usingDatabase === false) {
  activeSessionStore = memoryStore;   // ← swap mid‑flight
}
When the page first loads, the login request is handled while activeSessionStore is a PostgreSQL store (or vice‑versa).
Later, when Calendar makes its first authenticated call, the health‑check logic decides the DB looks down (or usingDatabase is false) and flips activeSessionStore to MemoryStore.
The old session row obviously isn’t in the new store, so requireAuth fails ⇒ 401 ⇒ redirect.

Any route that doesn’t call requireAuth (Dashboard, Pipeline, etc.) never notices the missing session, so the bug feels specific to Calendar.

🛠️ Fast fix
Stop hot‑swapping the session store.
Pick one store at startup and stick with it for the life of the process.

ts
Copy
Edit
// server/index.ts
// (1) decide once, at boot
const useMemoryOnly =
  process.env.USE_MEMORY_SESSIONS === "true" || process.env.NODE_ENV !== "production";

const sessionStore = useMemoryOnly
  ? new MemoryStore({ checkPeriod: 86400000 })
  : new PgSession({
      pool,
      tableName: "session",
      createTableIfMissing: true,
    });

// (2) one middleware, no switching
app.use(
  session({
    store: sessionStore,
    secret: process.env.SESSION_SECRET || "investment-tracker-secret",
    name: "investment_tracker.sid",
    resave: false,
    saveUninitialized: false,
    rolling: true,
    cookie: {
      secure: process.env.NODE_ENV === "production",
      maxAge: 7 * 24 * 60 * 60 * 1000,
      sameSite: "lax",
      httpOnly: true,
      path: "/",
    },
  }),
);
🧑‍💻 What else to clean up
Area	Suggestion
Health checks	Keep the DB‑liveness probe, but log and meter it instead of changing session back‑ends on the fly.
Auth routes	If you really need auto‑fallback, replicate the session row into both stores instead of switching stores (complex) or issue a transparent re‑login token.
API consistency	Either: (a) make all routes public and rely on RBAC at the component level, or keep them private and remove dynamic store swapping. Mixing the two surfaces bugs like this quickly.
Client navigation	Replace plain <a href="/calendar"> with Wouter’s <Link> to avoid full‑page reloads (not the root cause here, but better UX).

✅ Test it in Replit
Remove the dynamic getSessionStore logic (or hard‑code MemoryStore while you’re on Replit).

pnpm dev → log in → click Calendar: you should stay authenticated.

Optional: add a Jest/supertest integration test that logs in, flips routes, and asserts 200, guarding against regressions.

Let me know if you’d like a patch diff or help wiring a quick test!