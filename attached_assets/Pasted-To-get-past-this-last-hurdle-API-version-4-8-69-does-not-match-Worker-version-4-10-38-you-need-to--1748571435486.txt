To get past this last hurdle—“API version 4.8.69 does not match Worker version 4.10.38”—you need to ensure one single source of truth for both the PDF.js API and the worker script. Here’s a modular, end-to-end recipe:

1. Pick one version and lock it in package.json
Decide whether you want to run PDF.js 4.8.69 (the one you originally imported) or 4.10.38 (the one your worker copy came from). Then in your client’s package.json, pin both the API and worker to that exact version:

jsonc
Copy
Edit
// client/package.json
{
  "dependencies": {
    "react-pdf": "9.x.x",
    "pdfjs-dist": "4.10.38"          // ← pick this or 4.8.69 — make both API & worker match
  }
}
Run:

bash
Copy
Edit
cd client
npm install
2. Bundle the worker via Vite so it always matches your installed pdfjs-dist
Create (or update) client/src/lib/setupPdfWorker.ts:

ts
Copy
Edit
// client/src/lib/setupPdfWorker.ts
import { GlobalWorkerOptions } from 'pdfjs-dist';

// Vite “?url” syntax will emit the worker file into `dist/assets` 
// and return the correct hashed URL at build time.
import workerUrl from 'pdfjs-dist/build/pdf.worker.min.js?url';

GlobalWorkerOptions.workerSrc = workerUrl;
Why this is modular

You import the worker directly from the same pdfjs-dist package you installed.

Vite guarantees that at build time, the worker file lives under /assets/... with the same version as your API.

No more copying into public/, no manual URLs, and no out-of-sync versions.

3. Remove any leftover CDN or hard-coded overrides
In all your components (e.g. EmbeddedPDFViewer.tsx), delete any lines that reset GlobalWorkerOptions.workerSrc to a CDN. You should only ever configure it once in setupPdfWorker.ts.

diff
Copy
Edit
- // ❌ Bad: overrides your bundled worker with a (wrong-version) CDN
- pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/4.8.69/pdf.worker.min.js`;
4. Import your setup at app startup
In client/src/main.tsx (or wherever your React tree begins):

ts
Copy
Edit
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

// **This must run before any <Document> is rendered**
import './lib/setupPdfWorker';

ReactDOM.render(<App />, document.getElementById('root'));
5. Rebuild and Redeploy
bash
Copy
Edit
cd client
npm run build
# then redeploy your server so it serves the new `dist` folder
6. Verify in DevTools
Network Tab → filter on pdf.worker.min.js

You should see a successful 200 request to /assets/pdf.worker.<hash>.js (no text/html, correct JS MIME type).

Console → no “fake worker” or version-mismatch warnings.

UI → the spinner gives way to your PDF pages.

Why This Solves It — Modularly
Single Version Source: The same pdfjs-dist package supplies both API and worker.

Build-time Asset Handling: Vite’s ?url syntax ensures the worker is included in your bundle with the right content type.

One-Time Setup: All worker configuration lives in a single file (setupPdfWorker.ts), making it testable and future-proof.

Zero CDN Reliance: No external fetches, so no CORS/CSP headaches in production.

Once you follow these steps, the versions will line up perfectly and your PDFs will load immediately instead of spinning forever. Let me know when you’ve given it a try!








