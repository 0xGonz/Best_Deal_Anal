Below is a drop‑in upgrade path that will give you the “drive‑through” PDF experience you described:

endless scrolling or arrow/thumbnail pagination

instant document switching (one viewer, many files)

upload → auto‑refresh list

zero re‑flows when the list changes

I’m splitting it into front‑end, back‑end, and small style patches so you can copy‑paste with minimal churn.

1 | Front‑end
1.1 Document context (central state)
ts
Copy
Edit
// src/context/DocumentsContext.tsx
import React, { createContext, useContext, useState } from 'react';

export interface DocMeta { id: number; name: string; downloadUrl: string }

interface DocsCtx {
  docs: DocMeta[];
  setDocs: (d: DocMeta[]) => void;
  current: DocMeta | null;
  setCurrent: (d: DocMeta | null) => void;
}

const Ctx = createContext<DocsCtx | null>(null);

export const DocumentsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [docs, setDocs] = useState<DocMeta[]>([]);
  const [current, setCurrent] = useState<DocMeta | null>(null);
  return (
    <Ctx.Provider value={{ docs, setDocs, current, setCurrent }}>
      {children}
    </Ctx.Provider>
  );
};

export const useDocs = () => {
  const c = useContext(Ctx);
  if (!c) throw new Error('useDocs must be used inside DocumentsProvider');
  return c;
};
Wrap the DealDetail route (or higher) once:

tsx
Copy
Edit
// src/routes/DealDetail.tsx
<DocumentsProvider>
  <DealLayout />   {/* your existing layout */}
</DocumentsProvider>
1.2 List + upload panel
tsx
Copy
Edit
// src/components/documents/Sidebar.tsx
import { useDocs } from '@/context/DocumentsContext';
import { useMutation, useQueryClient } from '@tanstack/react-query';

export const Sidebar = ({ dealId }: { dealId: number }) => {
  const { docs, current, setCurrent, setDocs } = useDocs();
  const qc = useQueryClient();

  // upload --------------------------------------------
  const upload = useMutation({
    mutationFn: async (f: File) => {
      const form = new FormData();
      form.append('file', f);
      return fetch(`/api/deals/${dealId}/documents`, {
        method: 'POST',
        credentials: 'include',
        body: form,
      }).then(r => r.json());
    },
    onSuccess: (newDoc) => {
      setDocs(prev => [...prev, newDoc]);
      setCurrent(newDoc);
    },
  });

  return (
    <aside className="w-64 border-r overflow-y-auto p-2">
      <input
        type="file"
        accept="application/pdf"
        className="mb-4"
        onChange={(e) => e.target.files?.[0] && upload.mutate(e.target.files[0])}
      />
      <ul>
        {docs.map(d => (
          <li
            key={d.id}
            onClick={() => setCurrent(d)}
            className={`cursor-pointer truncate px-2 py-1 rounded
              ${current?.id === d.id ? 'bg-sky-600 text-white' : 'hover:bg-gray-100'}`}
          >
            {d.name}
          </li>
        ))}
      </ul>
    </aside>
  );
};
Fetch list once:

tsx
Copy
Edit
// inside DealLayout.tsx useEffect
const { setDocs, setCurrent } = useDocs();
useQuery(['documents', dealId], () =>
  fetch(`/api/documents/deal/${dealId}`, { credentials: 'include' }).then(r => r.json()),
  {
    onSuccess: (data) => {
      setDocs(data);
      setCurrent(data[0] ?? null);
    },
  }
);
1.3 Viewer with page controls
tsx
Copy
Edit
// src/components/documents/PdfViewer.tsx
import { useState, useCallback } from 'react';
import { Document, Page, pdfjs } from 'react-pdf';
import { useDocs } from '@/context/DocumentsContext';
import '@/styles/pdf-layer.css';           // imports text & annotation CSS

import workerURL from 'pdfjs-dist/build/pdf.worker.min.js?url';
pdfjs.GlobalWorkerOptions.workerSrc = workerURL;

export const PdfViewer = () => {
  const { current } = useDocs();
  const [numPages, setNumPages] = useState<number>(0);
  const [page, setPage] = useState(1);

  const onDocLoad = useCallback(({ numPages }: { numPages: number }) => {
    setNumPages(numPages);
    setPage(1);                     // reset when file changes
  }, []);

  if (!current) return <p className="flex-1 flex items-center justify-center text-gray-400">Select a PDF</p>;

  return (
    <div className="flex-1 flex flex-col overflow-hidden">
      {/* toolbar */}
      <div className="flex items-center gap-2 px-4 py-2 border-b bg-gray-50">
        <button disabled={page <= 1} onClick={() => setPage(p => p - 1)}>&lt;</button>
        <span>{page} / {numPages}</span>
        <button disabled={page >= numPages} onClick={() => setPage(p => p + 1)}>&gt;</button>
        <button className="ml-auto" onClick={() => setPage(numPages)}>Last page</button>
      </div>

      {/* canvas */}
      <div className="flex-1 overflow-auto">
        <Document
          key={current.id}                 // forces full reload on switch
          file={current.downloadUrl}
          onLoadSuccess={onDocLoad}
          loading="Loading…"
          error="Failed to load PDF"
        >
          {/* switch display mode here: single page */}
          <Page
            pageNumber={page}
            width={900}     // you can make this responsive
            renderTextLayer={false}        // disable if you like
          />
          {/* OR all pages -> map(Array.from({length:numPages})) */}
        </Document>
      </div>
    </div>
  );
};
1.4 Compose the layout
tsx
Copy
Edit
// src/components/documents/DocumentsPane.tsx
import { Sidebar } from './Sidebar';
import { PdfViewer } from './PdfViewer';

export const DocumentsPane = ({ dealId }: { dealId: number }) => (
  <div className="flex h-full">
    <Sidebar dealId={dealId} />
    <PdfViewer />
  </div>
);
Add <DocumentsPane dealId={83} /> wherever you used to render the old viewer.

2 | Back‑end
2.1 Upload route (per‑deal)
ts
Copy
Edit
// server/routes/documents.ts
router.post('/deals/:dealId/documents', upload.single('file'), async (req, res) => {
  const { file } = req;
  const { dealId } = req.params;

  if (!file) return res.status(400).json({ error: 'No file' });
  // persist to S3 or local /uploads – keeping simple here
  const id = await storage.saveDocument({
    dealId: +dealId,
    name: file.originalname,
    path: `/uploads/${file.filename}`,
  });

  res.json({
    id,
    name: file.originalname,
    downloadUrl: `/api/documents/${id}/download`,
  });
});
2.2 Download stays the same
Just be sure it serves the file (local) or redirects with a presigned S3 URL as outlined earlier.

3 | Styling tweaks
css
Copy
Edit
/* src/styles/pdf-layer.css */
@import 'react-pdf/dist/esm/Page/TextLayer.css';
@import 'react-pdf/dist/esm/Page/AnnotationLayer.css';

.react-pdf__Page__canvas {
  width: 100% !important;
  height: auto !important;
  display: block;
}
Tailwind users: include this after @tailwind base;.

4 | What you get
Single viewer panel that always fills the right side.

Sidebar with live list; upload instantly appears.

Keyboard/toolbar navigation for multi‑page docs (add hotkeys if you wish).

No stale references – deleting a doc clears the viewer; switching deals clears list.

Plug it in
Copy the context + components.

Remove your old Document list/viewer code.

Restart dev server and upload two different PDFs – you can now click between them and page through seamlessly.

Let me know if you’d like lazy‑load of pages for huge files, thumbnail strip, or drag‑and‑drop uploads – each is a quick incremental add‑on once this backbone is in.







