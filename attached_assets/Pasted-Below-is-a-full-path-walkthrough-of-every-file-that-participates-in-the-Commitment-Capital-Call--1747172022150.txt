Below is a full‑path walkthrough of every file that participates in the Commitment → Capital‑Call → Payment → Calendar pipeline, followed by a line‑item analysis of the logic that computes called % / uncalled % and places cards on the calendar.

1 | Backend flow (from HTTP to DB)
Step	File & key lines	Role
POST /commitments – create commitment row	server/routes/commitments.ts L18‑46	Validates committed_usd, inserts into commitments table.
POST /investments/:id/capital-calls/bulk	server/routes/capitalCalls.ts L55‑108	Calls CapitalCallsService.createCalls with an array of {dueDate, callUsd}.
CapitalCallsService.createCalls	server/services/capitalCalls.service.ts L21‑78	• Fetches commitment.
• Calculates alreadyPlanned sum.
• Throws exceedsCommitment if over 100 %.
• Inserts rows with status='scheduled'.
PATCH /capital-calls/:id/pay	server/routes/capitalCalls.ts L120‑158	Passes (callId, amount, paidDate) to payCall.
CapitalCallsService.payCall	services/capitalCalls.service.ts L80‑140	• Sums prior payments.
• Throws overPayment if amount > outstanding.
• Inserts payments row.
• Updates capital_calls.status to partial or complete.
Capital calls view	db/views/capital_call_totals_v.sql	Joins capital_calls + payments, adds paid_usd, outstanding_usd, live_status (scheduled / partial / complete / overdue).
GET /funds/:id/capital-calls	routes/capitalCalls.ts L175‑210	SELECT * FROM capital_calls_v WHERE fund_id=?. Returns paid_usd, call_usd, live_status.
Fund stats endpoint	routes/fundStats.ts L10‑42	Aggregates view rows to compute called_usd, uncalled_usd, called_pct.

Observations
✓ / ✗	Line(s)	Comment
✓	payCall guard	Prevents over‑payment via runtime check.
✓	live_status view	Removes need for nightly cron.
✗	createCalls does not re‑compute outstanding_usd if calls are edited later; you rely on constraints only.	
✗	No compound UNIQUE(commitment_id, due_date) in schema (though recommended earlier).	
✗	fundStats aggregates only by fund; Deal page recomputes stats client‑side, leading to drift if a row is updated elsewhere.	

2 | Frontend flow
Step	File & hook	What it does
Fetch dashboard stats	client/src/hooks/useFundStats.ts	React‑Query on /funds/:id/stats.
Fetch calls for calendar	useFundCalls.ts	['calls', fundId] → /funds/:id/capital-calls?include=investment.
Scheduler Dialog	components/capitalCalls/SchedulerDialog.tsx	Builds rows, calls createCalls mutation.
Pay drawer	CallDrawer.tsx	Uses usePayCall mutation; optimistic update to flip status.
Calendar event mapping	FundCalendar.tsx L60‑78	Maps call.due_date → event.start and color based on live_status.
Dashboard bar	FundCommitmentInfo.tsx	Uses called_usd / uncalled_usd to draw progress ring.
Deal page “Allocations”	AllocationCommitmentInfo.tsx	Filters view rows by commitment_id, then sums to display per‑deal called/uncalled.

Observations
✓ / ✗	File	Comment
✓	FundCalendar	Renders partial vs complete badges correctly (60 % paid).
✓	usePayCall	Invalidates both ['calls', fundId] and ['fundStats', fundId].
✗	SchedulerDialog	Uses local committedUsd prop but doesn’t show remaining while typing; user can still over‑allocate (service will reject but UX could guide).
✗	usePayCall optimistic update flips status to complete immediately, even if amount < outstanding, then rolls back on 400. Better: compute optimistic new paid_usd.	
✗	Deal page allocation stats rely on client filtering; would be cleaner to call /capital-calls?dealId=84.	
✗	Error toast for live_status === overdue not implemented; red cards show but user sees no alert.	

3 | Integration points and pain spots
Editing or deleting a capital call:
No endpoint yet. If an analyst schedules the wrong tranche date they must delete in DB or re‑seed. Add PATCH /capital-calls/:id to change due_date or call_usd with same guard logic.

Commitment downsizing (LP reduces commitment)
Reducing committed_usd via a PATCH on /commitments/:id can now violate SUM(call_usd) ≤ committed. Add service guard or trigger an app error.

Cross‑module stats
“Pipeline” view wants columns for Capital Called % next to deals. Currently each Deal row fetches /fundStats separately—N+1. Provide /deals/called-stats?dealIds=… batch endpoint or embed stats in deal serializer.

4 | Recommended refactors for full modularity
Backend
Action	Benefit
Move all capital‑call logic to features/capital-calls/ (routes, controller, service, view SQL) and export typed DTOs.	One place to update rules; no duplicate old routes.
Add CommitmentService that wraps commitment CRUD & enforces SUM(call_usd) ≤ committed_usd on every change (create, update, delete calls).	Guarantees integrity regardless of which endpoint fires.
Unify stats in a single view (fund_commitment_stats_v) joining commitments, capital_calls, payments.	Fund, deal, pipeline, and LP portal can all rely on same columns.
Create generic BaseService.withAudit to log every create/update/delete automatically to audit_logs table.	Capital‑call payments and edits become traceable for compliance.

Frontend
Action	Benefit
Dedicated hooks (useCommitments, useCapitalCalls) in client/src/hooks/capitalCalls/.	Removes direct API calls from components.
Feature folders under components/capitalCalls/ (SchedulerDialog, PayDrawer, CallTable) and index export.	Easier to reuse in Fund, Deal, Pipeline pages.
Context provider for Calendar events (capital calls + closings + meetings).	Single source; pages opt‑in and share color legend.
Type‑safe query keys (utility qk.capitalCalls(fundId)) to prevent mismatched keys.	No accidental stale data.

5 | Immediate quick fix (BUG you reported)
Balerion shows “100 % un‑called” even though 40 % paid.

Cause: FundStats endpoint sums call_usd only when status = 'complete'.
Because your tranche is partially_paid, paid_usd is non‑zero but status remains scheduled. The called_usd used by dashboard ignores it.

Patch in /fundStats.ts

diff
Copy
Edit
- SELECT SUM(call_usd) FILTER (WHERE status = 'complete')  AS called_usd,
-        SUM(call_usd) FILTER (WHERE status <> 'complete') AS uncalled_usd
+ SELECT SUM(paid_usd) AS called_usd,
+        SUM(call_usd - paid_usd) AS uncalled_usd
Now the dashboard and AUM calc use actual cash (paid_usd) instead of status field.

Bottom line
The capital‑call module is structurally solid after your recent service‑layer refactor.

Remaining gaps are mostly edge‑case data integrity (partial payments, edits) and duplication (old routes vs new).

Consolidate code by feature, rely on the view with paid_usd, and add the few missing endpoints (edit/delete call). Then the uncalled / called maths will be right everywhere and future features (distributions, LP capital accounts) can build on the same modular foundation.







