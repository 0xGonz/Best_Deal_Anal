✅ PDF.js worker configured correctly: https://unpkg.com/pdfjs-dist@4.8.69/build/pdf.worker.min.js
ProtectedRoute for /deals/:id: isLoading=true, user=undefined
Query fetch request: /api/system/health 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Fetching current user data
Auth provider mounted - checking authentication status
Manual auth refresh requested
Current user data fetched successfully: 
Object {id: 4, username: "Gonz", fullName: "Brett Gonzalez", initials: "BG", email: "bgonzalez@doliveradvisors.com", …}
ProtectedRoute for /deals/:id: isLoading=false, user=Gonz
ProtectedRoute /deals/:id: Rendering component for user Gonz
Query fetch request: /api/notifications 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Query fetch request: /api/notifications/unread-count 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
UserAvatar: User 4 has color #D32F2F
Avatar color changed to: null
Query fetch request: /api/auth/me 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Query fetch request: /api/deals 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Query fetch request: /api/funds 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Query fetch request: /api/deals/100 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Query fetch request: /api/deals/100/stars 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
ProtectedRoute for /deals/:id: isLoading=false, user=Gonz
ProtectedRoute /deals/:id: Rendering component for user Gonz
Avatar color changed to: #D32F2F
Query Response from /api/system/health: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/system/health: 
Object {status: "ok", timestamp: "2025-05-29T16:29:34.028Z", storage: "pg", databaseConnected: true, environment: "development", …}
Query Response from /api/notifications: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/notifications: 
(2) [{…}, {…}]
Query Response from /api/funds: 
Object {status: 200, statusText: "OK", ok: true}
Query Response from /api/notifications/unread-count: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/funds: 
(2) [{…}, {…}]
Using /me endpoint data for avatar 
Object {id: 4, username: "Gonz", fullName: "Brett Gonzalez", initials: "BG", email: "bgonzalez@doliveradvisors.com", …}
Query data received from /api/notifications/unread-count: 
Object {count: 2}
Query Response from /api/deals: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/deals: 
(91) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]
Query Response from /api/deals/100/stars: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/deals/100/stars: 
Array []
Query Response from /api/auth/me: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/auth/me: 
Object {id: 4, username: "Gonz", fullName: "Brett Gonzalez", initials: "BG", email: "bgonzalez@doliveradvisors.com", …}
Query Response from /api/deals/100: 
Object {status: 500, statusText: "Internal Server Error", ok: false}
Error response from /api/deals/100: 
Object {status: 500, text: "{"message":"Failed to fetch deal"}"}
status: 500
text: "{"message":"Failed to fetch deal"}"
[[Prototype]]: Object

Exception during query fetch to /api/deals/100: 
TypeError {message: "Failed to execute 'text' on 'Response': body stream already read"}

at t.value (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:17465)
at new t (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:12630)
at t.value (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:32766)
at https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:34400
Query fetch request: /api/deals/100 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Query Response from /api/deals/100: 
Object {status: 500, statusText: "Internal Server Error", ok: false}
Error response from /api/deals/100: 
Object {status: 500, text: "{"message":"Failed to fetch deal"}"}
status: 500
text: "{"message":"Failed to fetch deal"}"
[[Prototype]]: Object

Exception during query fetch to /api/deals/100: 
TypeError {message: "Failed to execute 'text' on 'Response': body stream already read"}

at t.value (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:17465)
at new t (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:12630)
at t.value (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:32766)
at https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:34400
Using /me endpoint data for avatar 
Object {id: 4, username: "Gonz", fullName: "Brett Gonzalez", initials: "BG", email: "bgonzalez@doliveradvisors.com", …}
