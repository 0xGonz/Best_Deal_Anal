Your API calls are still succeeding— the only thing blowing up is the **pdf.js worker bootstrap**.
Because the worker never loads, react‑pdf falls back to a “fake worker,” then throws when it can’t execute any PDF op.

Below is a **bullet‑proof Vite‑specific patch** that works in both dev *and* production builds.

---

## 1. Add the worker as a true static asset that Vite knows how to serve

### a. Install `pdfjs‑dist` if it isn’t already at the same major version as `react‑pdf`

```bash
pnpm add pdfjs-dist@^4 react-pdf@^7
```

*(Keep their majors in lock‑step—e.g., 4.x with 7.x.)*

### b. Create a tiny helper file so we don’t repeat boilerplate

`src/lib/setupPdfWorker.ts`

```ts
import { pdfjs } from 'react-pdf';

// Tell Vite to copy the worker file to /assets and give us its final URL.
// The `?url` suffix is the magic.
import workerURL from 'pdfjs-dist/build/pdf.worker.min.js?url';

// Register the URL with pdf.js at runtime.
pdfjs.GlobalWorkerOptions.workerSrc = workerURL;
```

---

## 2. Call that helper once, as early as possible (e.g., in `main.tsx`)

```tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

import './lib/setupPdfWorker';   // ← one‑liner, nothing else to import

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);
```

That’s it—no other component code changes.

---

## 3. Why this fixes the error you’re seeing

| Step            | What was happening before                                                                                                                      | What the patch does                                                                                                                        |
| --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| **Bundle time** | Vite saw `import { Document } from 'react-pdf'` but had **no static reference** to `pdf.worker.mjs`, so it never copied the file to `/assets`. | `?url` forces Vite/Rollup to treat the worker file as a static asset, emit it, and return the final hashed URL string.                     |
| **Runtime**     | pdf.js asked for `pdf.worker.mjs` (relative URL) → 404 ⇒ “fake worker” ⇒ crash.                                                                | We inject the *exact* URL (`/assets/pdf.worker.min.3fe1d8.js`) into `GlobalWorkerOptions.workerSrc` **before** any `<Document />` renders. |

---

## 4. Confirming the fix

1. **Refresh dev server** (`pnpm dev`).
2. Open a deal with a PDF—DevTools Network tab should show the worker file loading with `200 OK`.
3. The “Setting up fake worker” warning will disappear, and the PDF will render.

*(In production: run `pnpm build && pnpm preview`, then repeat the check.)*

---

## 5. Common edge‑cases & answers

| Symptom                             | Likely cause                                                                | Remedy                                                         |
| ----------------------------------- | --------------------------------------------------------------------------- | -------------------------------------------------------------- |
| Still shows fake‑worker warning     | `setupPdfWorker.ts` not imported **before** the first `<Document/>` mount   | Ensure import is in `main.tsx` (or the very top of `App.tsx`). |
| 404 on the worker file in prod only | Deployed under a sub‑path (e.g., `/app/`) and using **absolute** worker URL | In `vite.config.ts`, set `base:'/app/'` *and* rebuild.         |
| MIME type warning                   | Hosting platform sets wrong `Content‑Type` for `.js`                        | Force correct MIME or rename to `.mjs` (add `?url&format=es`). |

---

### Next step for you

Apply the tiny helper + import, redeploy, and the error should be gone.
Ping me once it’s loading—then we can tackle pagination, lazy‑loading big PDFs, or any other UI/UX tweaks you have in mind.
