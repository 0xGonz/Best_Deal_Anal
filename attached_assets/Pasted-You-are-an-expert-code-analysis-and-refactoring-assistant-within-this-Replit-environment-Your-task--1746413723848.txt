You are an expert code analysis and refactoring assistant within this Replit environment. Your task is to help me eliminate hardcoded data and ensure all calculations rely on external APIs or uploaded/stored data through a two-phase process.

**Phase 1: Comprehensive Identification and Reporting (NO CODE CHANGES)**

Your first objective is to conduct a thorough, line-by-line review of the *entire* codebase in this project. During this phase, you will *only* identify and report issues; you will make absolutely *no* changes to the code.

Scan every file for the following:

1.  **Hardcoded Data:** Identify any data values directly embedded in the code that should be dynamic, configurable, or externalized. This includes literal strings, numbers used for configuration, file paths, credentials, and any other fixed values that should not be static in the code.
2.  **Calculations Ignoring External Data:** Find any calculations performed using static, hardcoded values when they logically should be using data fetched from external APIs or data that has been uploaded and stored within the application.

As you find these issues, compile a single, comprehensive list. For each entry in the list, provide:

* The **File Name** and **Line Number(s)** where the issue is located.
* A brief **Description of the Issue** (e.g., "Hardcoded database password," "Calculation of discount using static percentage").

**Do NOT propose solutions or make any code modifications during Phase 1.** Your sole task in this phase is to find and list *all* relevant issues throughout the entire project.

Once you have completed the scan of the entire codebase and compiled the complete list of all identified hardcoding and inappropriate calculation issues, present this list to me. Clearly indicate that Phase 1 is complete.

**Phase 2: Iterative Resolution (ONE FIX AT A TIME)**

After you have presented the complete list from Phase 1 and I acknowledge it, we will begin Phase 2. In this phase, you will go through the list you generated, addressing each issue one by one in the order they appear (or in an order I specify).

For each issue from the list in Phase 1:

1.  **Announce Issue:** State which issue you are currently addressing from the list (e.g., "Addressing issue 1: Hardcoded database password in db.py").
2.  **Propose Solution:** Clearly describe the specific code change you will make *to fix only this single issue*. Explain the reasoning behind the solution (e.g., "Will replace password string with lookup from `os.environ['DB_PASSWORD']`"). Include the exact code snippet(s) you will modify or add.
3.  **Implement Change:** **Apply the proposed code change directly to the file.**
4.  **Confirm:** Confirm that the change for this specific issue has been successfully implemented in the codebase.

You will then proceed to the next issue on the list, repeating steps 1-4, until all issues identified in Phase 1 have been addressed.

If any issue on the list seems complex or its resolution impacts other identified issues, highlight this before implementing and suggest how we should proceed (e.g., combining fixes, re-evaluating).

**Begin Phase 1 now: Start scanning the codebase for hardcoded data and inappropriate calculations and compile the list. Remember: NO code changes in Phase 1.**
This prompt clearly defines the two phases, ensures you get a complete picture first, and then proceeds with fixing issues individually with visibility into each change being made. Remember the importance of backing up your project before starting any automated code modifications.






okay now lets make a prompt for a deisgn expert to make sure all cards and features and pages and layout are repeosnive amd auto adjust and cards are propley placed anmd deisgn is extremly good for eveyr page and every layout in the app




Show thinking
Okay, switching gears from code logic to design and layout!

Reviewing design and responsiveness purely through code analysis is challenging for an AI, as it cannot visually interpret the rendered output across different screen sizes like a human can. However, Replit's AI can analyze your frontend code (HTML, CSS, JavaScript frameworks) to check for the implementation details that enable responsiveness and good layout.

Here is a prompt for Replit's AI, framed as a design expert, to analyze your frontend code for responsiveness and layout principles. It focuses on what the AI can assess from the code itself.

Prompt for Design and Responsiveness Code Review in Replit:

You are an expert Frontend Developer and UI/UX specialist analyzing the codebase within this Replit environment. Your goal is to meticulously review the frontend code (HTML, CSS, and relevant JavaScript/framework code) to assess its implementation of responsive design and layout, focusing specifically on cards, features, pages, and overall structure.

Perform a detailed review of the frontend code for every page, component, and feature in the application. Evaluate the code based on the following criteria:

1.  **Overall Responsiveness Implementation:**
    * Look for the use of CSS media queries to apply styles based on screen size.
    * Check for the use of flexible units (percentages, `em`, `rem`, `vw`, `vh`) instead of fixed pixels for widths, heights, margins, and padding where appropriate for fluid layouts.
    * Analyze the use of layout models like Flexbox and CSS Grid to create flexible and responsive structures.
    * Identify any fixed-width containers or elements that might break responsiveness on smaller screens.
    * Assess the implementation of mobile-first or desktop-first design principles in the CSS structure.

2.  **Card Placement and Responsiveness:**
    * Analyze the HTML structure and CSS styling specifically for elements identified as "cards" or similar content containers.
    * Check how cards are arranged on different screen sizes (e.g., stacking on mobile, multiple columns on larger screens).
    * Evaluate the CSS used for card layout (Flexbox, Grid, floats) to ensure it's responsive and maintains proper spacing and alignment.
    * Identify any hardcoded widths or heights on cards that might prevent them from adjusting to different screen sizes.

3.  **Page and Feature Layout:**
    * Review the primary layout structure for each distinct page and major feature area.
    * Assess how major page elements (headers, footers, sidebars, main content areas) are arranged and how their layout changes responsively.
    * Look for consistent use of spacing, margins, and padding that adapts to different screen sizes.
    * Identify any elements that overflow their containers or cause horizontal scrolling on smaller devices based on the CSS properties used.

4.  **Code Quality for Design Implementation:**
    * Comment on the organization and maintainability of the CSS and frontend code related to layout and responsiveness.
    * Suggest improvements for using CSS classes, component-based styling, or preprocessors if applicable to make the design code more manageable.

For each page, feature, or component you review, provide your findings. Highlight areas where the code successfully implements responsive design principles and areas where there are potential issues or opportunities for improvement based on your analysis of the code.

**Acknowledge Limitations:**

State clearly that this review is based *solely* on the analysis of the code and that a full assessment of the design's responsiveness and appearance requires viewing the live application on various devices and screen sizes.

**Output Format:**

Present your findings in a structured way, perhaps per page or per major component. Use headings for each of the criteria analyzed (Responsiveness, Card Layout, Page Layout, Code Quality). Provide specific file names and line numbers where relevant to your observations.

**Begin the design-focused code review now, starting with the main layout files and core components.**