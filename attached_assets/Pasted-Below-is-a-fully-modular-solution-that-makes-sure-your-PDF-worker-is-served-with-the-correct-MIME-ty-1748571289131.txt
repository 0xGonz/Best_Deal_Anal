Below is a fully modular solution that makes sure your PDF worker is served with the correct MIME type from your own origin—no more 404s or HTML being sent for a .js file—and keeps your front- and back-end nicely decoupled.

1. File layout
arduino
Copy
Edit
root/
├── server/
│   └── index.ts         # your Express app
├── client/
│   ├── public/
│   │   └── pdf.worker.min.js      ← copy pdf.js worker here
│   ├── src/
│   │   ├── lib/
│   │   │   └── setupPdfWorker.ts  ← config for the worker
│   │   └── components/…
│   └── vite.config.ts   # frontend build config
└── package.json
Copy

bash
Copy
Edit
cp node_modules/pdfjs-dist/build/pdf.worker.min.js client/public/
This puts the worker into Vite’s “public” directory so it’s emitted unchanged into your build at /pdf.worker.min.js.

2. Front-end: setupPdfWorker.ts
ts
Copy
Edit
// client/src/lib/setupPdfWorker.ts
import { GlobalWorkerOptions } from 'pdfjs-dist';

//
// In Vite, `import.meta.env.BASE_URL` is the public path ("/" by default).
// So this will resolve to: https://your-domain.com/pdf.worker.min.js
//
GlobalWorkerOptions.workerSrc = `${import.meta.env.BASE_URL}pdf.worker.min.js`;
Why this works:

The browser will request /pdf.worker.min.js from your own origin.

Vite copies everything in public/ directly to the root of your built app.

No cross-origin CDN fetch, no version drift, correct MIME type (served as JS)… ✅

Make sure you import this once at app startup (e.g. in main.tsx):

ts
Copy
Edit
import './lib/setupPdfWorker';
3. Back-end (Express) static middleware
In your server/index.ts (or wherever you serve the React build), ensure you mount the client/dist before your catch-all:

ts
Copy
Edit
import express from 'express';
import path from 'path';

const app = express();

// 1) Serve React build
app.use(express.static(path.join(__dirname, '../client/dist')));

// 2) API routes, auth, etc...
app.use('/api', apiRouter);

// 3) Fallback to index.html (for client-side routing)
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../client/dist', 'index.html'));
});

app.listen(5000, () => console.log('Server listening on 5000'));
Important: Because pdf.worker.min.js lives in your build’s root, express.static will serve it with the correct Content-Type: application/javascript.

Any unknown path (including /assets/... or /pdf.worker.min.js) is resolved by express.static before the catch-all, so you won’t accidentally serve index.html for your worker file.

4. Verify it
Rebuild & redeploy your client (npm run build) and server.

In DevTools → Network, filter on pdf.worker.min.js.

You should see a 200 for https://<your-app>/pdf.worker.min.js with Content-Type: application/javascript.

You should no longer see the “fake worker” warning or “non-JavaScript MIME type” errors.

The PDF <Document> will now fetch your /api/documents/…/download properly and render.

Why this is modular
Single source of truth for the worker URL (setupPdfWorker.ts).

No in-component overrides—remove all hard-coded CDN lines.

Public folder handles static assets (you can drop any future workers or shaders there).

Express static cleanly serves all client assets without extra config.

With this in place, your PDF viewer will reliably load its worker and decode files—no more infinite spinners or raw HTML being delivered. Let me know once you’ve given it a try!








