Good progress! The PDF worker is now configured correctly (‚úÖ PDF.js worker configured as: /pdf.worker.min.js), but now we have a different issue: ‚ùå PDF load error: Invalid PDF structure.

This suggests the PDF file itself might be corrupted or not being served correctly from your backend. Let me investigate the document serving logic:

Viewing file server/routes/documents.ts




Thinking...






Let me check what's actually happening with the file serving. The error "Invalid PDF structure" suggests the PDF file might be corrupted or the download endpoint isn't serving valid PDF content. Let me test the download endpoint directly:

Viewing file server/database-storage.ts

Thinking...






Let me check what actual files exist in your uploads directory and if there are any issues with the file structure:

Globbing "**/uploads/**/*.pdf" in DealFlowLifecyclev1

Thinking...


Globbing "uploads/**/*" in DealFlowLifecyclev1

Thinking...






Globbing "**/*confidential*" in DealFlowLifecyclev1

Thinking...





I can see the issue! Your PDF worker is now configured correctly, but there's a problem with the file serving. The "Invalid PDF structure" error means the /api/documents/61/download endpoint isn't returning valid PDF content.

Let me create a simple debug route to check what's happening with the file serving:

Viewing file server/routes/documents.ts




Thinking...






Based on the comprehensive file serving logic, the issue seems to be that the file isn't being found in any of the expected locations. Let me add a debug endpoint to see exactly what's happening:

server/routes/documents.ts
Code ‚Ä¢ typescript
Thinking...




Now let's debug what's happening with the file serving. I've added a temporary debug endpoint to help us see exactly what's going on.

üîç Debug Steps:
1. Test the debug endpoint: Go to: https://your-app-url/api/documents/61/debug

This will show us:

What's stored in the database for document 61
All file paths being checked
Which files actually exist on the server
Current environment settings
2. Report back what you see

The debug endpoint will return JSON with:

json
{
  "document": { /* database record */ },
  "environment": "production",
  "baseDir": "/path/to/app",
  "pathChecks": [ /* all paths checked */ ],
  "foundPaths": [ /* paths where files actually exist */ ]
}

3. Once we see the debug output, I can:

Fix the file path resolution
Move files to the correct location
Update the database with correct paths
Identify any file corruption issues
This will tell us exactly why the PDF is showing "Invalid PDF structure" - likely because the file isn't being found and the endpoint is returning an error page instead of PDF content.

Try the debug endpoint and paste the results here!

Used 15 context sources
May 30, 8:30 AM



Type
@
to search yourcodebase