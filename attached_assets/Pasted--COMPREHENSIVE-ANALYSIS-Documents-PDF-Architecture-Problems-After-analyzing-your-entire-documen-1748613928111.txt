üîç COMPREHENSIVE ANALYSIS: Documents & PDF Architecture Problems
After analyzing your entire documents architecture, I've identified 5 major systemic issues causing the PDF viewing failures:

üö® CRITICAL PROBLEMS IDENTIFIED:
1. File Storage Path Chaos
Upload Service: Saves to data/uploads/
Database: Stores paths as data/uploads/filename
Download Route: Searches 8+ different locations blindly
Result: Files uploaded but not found during serving
2. Replit Production Environment Issues
Problem: Replit has persistent vs ephemeral storage differences
Issue: Files uploaded to temporary locations, lost on restart
Database: Contains stale file paths to non-existent files
3. Multiple Conflicting Path Resolution Systems
FileManagerService: One resolution logic
Documents Route: Different resolution logic
UniversalDocumentViewer: Another path system
Result: No single source of truth
4. Database vs File System Mismatch
Database Record: filePath: "data/uploads/61-filename.pdf"
Actual File: May be in /tmp/, /app/uploads/, or missing entirely
Result: "Invalid PDF structure" because HTML error page served instead of PDF
5. Poor Error Handling in PDF Chain
Download Route: Returns 200 OK with error HTML when file missing
PDF Viewer: Tries to parse HTML as PDF ‚Üí "Invalid PDF structure"
User Sees: PDF error instead of "File not found"
üîß COMPREHENSIVE FIX STRATEGY
Let me implement a robust, unified document management system:

Universal Document Path Resolver
Code ‚Ä¢ typescript
Thinking...


server/routes/documents.ts
Code ‚Ä¢ typescript
Thinking...


server/services/document-upload.service.ts
Code ‚Ä¢ typescript
Thinking...


server/routes/documents.ts
Code ‚Ä¢ typescript
Thinking...


Comprehensive Document Path Fixer
Code ‚Ä¢ typescript
Thinking...


üìã COMPREHENSIVE SOLUTION SUMMARY
I've completely overhauled your documents and PDF viewing architecture to fix the systemic issues. Here's what I've implemented:

üö® ROOT PROBLEMS IDENTIFIED:
1. Path Resolution Chaos
Problem: 8+ different file storage patterns across components
Cause: No single source of truth for file locations
Impact: Files saved in one location, searched in another ‚Üí "File not found"
2. Environment-Specific Storage Issues
Problem: Different paths for dev vs production vs Replit
Cause: Hardcoded paths not environment-aware
Impact: Files work locally, fail on deployment
3. Poor Error Handling in PDF Chain
Problem: Download route returns HTML error pages with 200 status
Cause: Missing file returns error HTML instead of proper HTTP error
Impact: PDF viewer tries to parse HTML as PDF ‚Üí "Invalid PDF structure"
4. Inconsistent Database Records
Problem: File paths in DB don't match actual file locations
Cause: Legacy uploads, path changes, environment migrations
Impact: Files exist but can't be found
5. Multiple Conflicting Systems
Problem: FileManagerService, DocumentService, upload routes all had different logic
Cause: Organic growth without unified architecture
Impact: Each component solved the same problem differently
üîß COMPREHENSIVE FIXES IMPLEMENTED:
1. Created Universal Path Resolver (universal-path-resolver.ts)
‚úÖ Single source of truth for all file path resolution
‚úÖ Environment-aware storage (dev/prod/Replit)
‚úÖ Comprehensive file search across all possible locations
‚úÖ Built-in validation and error handling
‚úÖ Migration utilities to fix existing files
2. Rebuilt Document Download Route
‚úÖ Proper HTTP status codes (404 for missing files, not 200 with HTML)
‚úÖ JSON error responses that don't break PDF parsing
‚úÖ Comprehensive logging for debugging
‚úÖ Streaming error handling with cleanup
3. Standardized Upload Service
‚úÖ Deal-specific subdirectories (uploads/deal-123/)
‚úÖ Environment-aware storage paths
‚úÖ Consistent database records with relative paths
‚úÖ Proper file validation and cleanup
4. Enhanced Error Handling
‚úÖ Proper error types (404 for missing files, 500 for server errors)
‚úÖ Detailed error messages with actionable information
‚úÖ Graceful fallbacks when files can't be found
‚úÖ Comprehensive logging throughout the chain
5. Migration Script
‚úÖ Automatic file location and database path fixing
‚úÖ Backup and rollback capabilities
‚úÖ Dry run mode to preview changes
‚úÖ Progress reporting and error tracking
üöÄ NEXT STEPS TO DEPLOY:
1. Run the migration script first (dry run):

bash
npx tsx scripts/fix-document-paths-comprehensive.ts --dry-run

2. If dry run looks good, run actual migration:

bash
npx tsx scripts/fix-document-paths-comprehensive.ts --backup

3. Rebuild and deploy:

bash
npm run build
# Deploy to your hosting platform

4. Test the fix:

Navigate to Deal #102
Access: https://your-app-url/api/documents/61/debug
Should show file found and proper diagnostics
Try viewing the PDF - should load without "Invalid PDF structure" error
üéØ EXPECTED RESULTS:
‚úÖ PDFs load correctly without version mismatch or structure errors
‚úÖ All file types supported (PDF, Excel, Word, images)
‚úÖ Consistent behavior across development and production
‚úÖ Proper error messages when files are actually missing
‚úÖ Organized file storage with deal-specific directories
‚úÖ Future-proof architecture that handles environment changes

üîç DEBUG ENDPOINT AVAILABLE:
I've added a debug endpoint to help troubleshoot any remaining issues: /api/documents/:id/debug

This will show you:

Document database record
All paths being searched
Which files actually exist
Environment detection
File validation results
Try this with document 61: https://your-app-url/api/documents/61/debug

The universal path resolver should now find your files and serve them properly to the PDF viewer! Let me know what the debug endpoint shows.