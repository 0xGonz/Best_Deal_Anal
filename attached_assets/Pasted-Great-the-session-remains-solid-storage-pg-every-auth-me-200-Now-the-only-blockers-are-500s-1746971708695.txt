Great—the session remains solid (storage:"pg", every /auth/me = 200).
Now the only blockers are 500s coming from two endpoints, each caused by a schema mismatch.

Endpoint	Error	Root cause
/api/capital‑calls	column "amount_type" does not exist	Code expects a column that was renamed / never migrated.
/api/closing‑schedules	relation … does not exist	The closing_schedules table (or a mat‑view it joins) isn’t in the DB yet.

1 • Fix capital_calls
1.1 Locate the Drizzle schema
ts
Copy
Edit
// packages/db/schema/capitalCalls.ts
export const capitalCalls = pgTable("capital_calls", {
  id: serial("id").primaryKey(),
  fundId: integer("fund_id").references(() => funds.id),
  amount: numeric("amount", { precision: 14, scale: 2 }),
  amountType: text("amount_type")  //<– code still references this
});
1.2 What’s in Postgres now?
sql
Copy
Edit
\d+ capital_calls;
If the column is actually called type (or missing), generate a migration:

bash
Copy
Edit
pnpm drizzle-kit generate
# edit the up/down SQL:
ALTER TABLE capital_calls RENAME COLUMN type TO amount_type;
and run it:

bash
Copy
Edit
pnpm db:migrate
1.3 Re‑test
bash
Copy
Edit
curl -I http://localhost:3000/api/capital-calls   # should be 200
2 • Fix closing_schedules
2.1 Check table presence
sql
Copy
Edit
SELECT * FROM information_schema.tables
WHERE table_name = 'closing_schedules';
Absent ? → migration never ran.
Present but wrong columns ? → update schema.

Create the table:

sql
Copy
Edit
CREATE TABLE closing_schedules (
  id            serial PRIMARY KEY,
  deal_id       int REFERENCES deals(id),
  tranche       int    NOT NULL,
  due_date      date   NOT NULL,
  amount        numeric(14,2) NOT NULL,
  status        text   DEFAULT 'pending'
);
Record this as a migration so it lands in staging/prod.

2.2 Adjust the Drizzle schema & regenerate types
bash
Copy
Edit
pnpm types:generate   # or whatever your script is
2.3 Re‑test
bash
Copy
Edit
curl -I http://localhost:3000/api/closing-schedules   # expect 200
3 • Seed dev data so charts don’t look empty
After migrations succeed:

sql
Copy
Edit
INSERT INTO capital_calls(fund_id, amount, amount_type, due_date)
VALUES (1, 250000, 'capital', '2025‑06‑01');

INSERT INTO closing_schedules(deal_id, tranche, due_date, amount)
VALUES (17, 1, '2025‑05‑30', 500000);
4 • Add regression tests
ts
Copy
Edit
describe("Capital Calls & Closing Schedules", () => {
  it("returns 200 and JSON", async () => {
    await request(app).set(authCookie).get("/api/capital-calls").expect(200).expect("content-type", /json/);
    await request(app).set(authCookie).get("/api/closing-schedules").expect(200).expect("content-type", /json/);
  });
});
Gate CI so migrations + tests must pass before deploy.

Next step
Run the migrations, verify both endpoints return 200, and refresh Calendar—sector charts should populate, and the 500s will disappear. Ping me with any SQL errors or if something else throws, and we’ll keep tightening things up.