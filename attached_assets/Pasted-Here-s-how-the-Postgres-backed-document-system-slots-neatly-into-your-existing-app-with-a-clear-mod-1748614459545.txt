Here’s how the Postgres‐backed document system slots neatly into your existing app, with a clear module‐by‐module breakdown and an eye toward scalability and maintainability.

1. Folder Structure
graphql
Copy
Edit
root/
├── server/
│   ├── index.ts              # Express app bootstrap
│   ├── db/                   # Neon Postgres helper
│   │   └── index.ts
│   ├── routes/
│   │   └── documents.ts      # All document API endpoints
│   ├── middleware/
│   │   └── requireAuth.ts
│   └── services/
│       └── document.service.ts  # DB‐blob upload/download logic
└── client/
    ├── src/
    │   ├── lib/
    │   │   └── setupPdfWorker.ts
    │   ├── services/
    │   │   └── documentService.ts  # fetchList & download Blob
    │   ├── context/
    │   │   └── DocumentContext.tsx  # React context/provider
    │   ├── components/
    │   │   ├── DocumentList.tsx
    │   │   └── PDFViewer.tsx
    │   └── pages/
    │       └── DealDocumentsPage.tsx
    └── vite.config.ts
2. Server Integration
a) DB Helper (server/db/index.ts)
ts
Copy
Edit
import { Pool } from 'pg';
export const pool = new Pool({ connectionString: process.env.DATABASE_URL });
b) Document Service (server/services/document.service.ts)
ts
Copy
Edit
import { pool } from '../db';
export async function saveDocument(dealId: number, fileName: string, fileType: string, data: Buffer) {
  const { rows } = await pool.query(
    `INSERT INTO documents (deal_id, file_name, file_type, file_data)
     VALUES ($1,$2,$3,$4) RETURNING id, file_name AS "fileName", file_type AS "fileType"`,
    [dealId, fileName, fileType, data]
  );
  return rows[0];
}

export async function getDocument(id: number) {
  const { rows } = await pool.query(
    `SELECT file_name, file_type, file_data FROM documents WHERE id=$1`, [id]
  );
  return rows[0];
}

export async function listDocuments(dealId: number) {
  const { rows } = await pool.query(
    `SELECT id, file_name AS "fileName", file_type AS "fileType"
     FROM documents WHERE deal_id=$1 ORDER BY created_at`, [dealId]
  );
  return rows;
}
c) Routes (server/routes/documents.ts)
ts
Copy
Edit
import express from 'express';
import multer from 'multer';
import { requireAuth } from '../middleware/requireAuth';
import * as docSvc from '../services/document.service';

const upload = multer({ storage: multer.memoryStorage() });
const router = express.Router();

// Upload
router.post('/', requireAuth, upload.single('file'), async (req, res) => {
  const { dealId } = req.body;
  const { originalname, mimetype, buffer } = req.file!;
  const doc = await docSvc.saveDocument(+dealId, originalname, mimetype, buffer);
  res.json(doc);
});

// List for a deal
router.get('/deal/:dealId', requireAuth, async (req, res) => {
  const docs = await docSvc.listDocuments(+req.params.dealId);
  res.json(docs);
});

// Download
router.get('/:id/download', requireAuth, async (req, res) => {
  const doc = await docSvc.getDocument(+req.params.id);
  if (!doc) return res.status(404).json({ error: 'Not found' });
  res
    .type(doc.fileType)
    .set({
      'Content-Disposition': `inline; filename="${doc.fileName}"`,
      'Cache-Control': 'no-store, must-revalidate',
      'X-Content-Type-Options': 'nosniff',
    })
    .send(doc.fileData);
});

export default router;
d) Bootstrap (server/index.ts)
ts
Copy
Edit
import express from 'express';
import docRoutes from './routes/documents';
import { requireAuth } from './middleware/requireAuth';

const app = express();
app.use(express.json());

// 1) API
app.use('/api/documents', docRoutes);

// 2) Client build
app.use(express.static(path.join(__dirname,'../client/dist')));
app.get('*', (req, res) => {
  if (req.path.startsWith('/api/')) return res.status(404).json({ error:'Not found' });
  res.sendFile(path.join(__dirname,'../client/dist','index.html'));
});

app.listen(5000);
3. Client Integration
a) PDF Worker Setup (client/src/lib/setupPdfWorker.ts)
ts
Copy
Edit
import { pdfjs } from 'react-pdf';
import workerUrl from 'pdfjs-dist/build/pdf.worker.min.js?url';
pdfjs.GlobalWorkerOptions.workerSrc = workerUrl;
Import this once in your main.tsx.

b) Document Service (client/src/services/documentService.ts)
ts
Copy
Edit
export interface DocMeta { id: number; fileName: string; fileType: string; }

export async function listDealDocuments(dealId: number): Promise<DocMeta[]> {
  const res = await fetch(`/api/documents/deal/${dealId}`);
  return res.json();
}

export async function downloadDocument(id: number): Promise<Blob> {
  const res = await fetch(`/api/documents/${id}/download`);
  return res.blob();
}
c) Context (client/src/context/DocumentContext.tsx)
tsx
Copy
Edit
import React, { createContext, useContext, useState, useEffect } from 'react';
import { listDealDocuments } from '../services/documentService';

interface DocCtx { docs: any[]; selected: any | null; select: (d:any)=>void; }
const C = createContext<DocCtx>(null!);

export const DocumentProvider: React.FC<{dealId:number}> = ({dealId,children}) => {
  const [docs, setDocs] = useState([]); const [sel, setSel] = useState(null);
  useEffect(() => { listDealDocuments(dealId).then(list=>{ setDocs(list); if(list[0]) setSel(list[0]); }); }, [dealId]);
  return <C.Provider value={{docs,selected:sel,select:setSel}}>{children}</C.Provider>;
};

export const useDocuments = () => useContext(C);
d) Components
DocumentList.tsx

tsx
Copy
Edit
import React from 'react';
import { useDocuments } from '../context/DocumentContext';

export const DocumentList = () => {
  const { docs, selected, select } = useDocuments();
  return (
    <ul>
      {docs.map(d => (
        <li key={d.id} className={d.id===selected?.id?'active':''}
            onClick={()=>select(d)}>{d.fileName}</li>
      ))}
    </ul>
  );
};
PDFViewer.tsx

tsx
Copy
Edit
import React, { useState, useEffect } from 'react';
import { Document, Page } from 'react-pdf';
import { useDocuments } from '../context/DocumentContext';
import { downloadDocument } from '../services/documentService';

export const PDFViewer = () => {
  const { selected } = useDocuments();
  const [url, setUrl] = useState<string>();
  useEffect(() => {
    if (selected) {
      downloadDocument(selected.id)
        .then(blob => setUrl(URL.createObjectURL(blob)));
    }
  }, [selected]);
  if (!url) return <div>Select a document</div>;
  return (
    <Document file={url}>
      <Page pageNumber={1} />
    </Document>
  );
};
e) Page (DealDocumentsPage.tsx)
tsx
Copy
Edit
import React from 'react';
import { DocumentProvider } from '../context/DocumentContext';
import { DocumentList } from '../components/DocumentList';
import { PDFViewer } from '../components/PDFViewer';

export const DealDocumentsPage: React.FC<{dealId:number}> = ({dealId}) => (
  <DocumentProvider dealId={dealId}>
    <div className="docs-page">
      <aside><DocumentList /></aside>
      <main><PDFViewer /></main>
    </div>
  </DocumentProvider>
);
4. Why This Is Modular & Scalable
Single Source of Truth
All upload/download logic lives in document.service.ts on the server and documentService.ts on the client.

Database‐backed Storage
Using Neon’s Postgres bytea means your documents survive every deploy. No volume mounts or filesystem quirks.

Separation of Concerns

Server: routes/ vs services/ vs db/

Client: services/ vs context/ vs components/

Easily Testable

You can unit‐test document.service.ts by mocking pool.query.

UI components can be tested by stubbing the DocumentContext.

Future Extensions

Large Files: Switch to Postgres Large Objects or S3 by just swapping out document.service.ts.

Annotations: Add an annotations table linked by document_id.

Versioning: Add version column and simple migration script.

Authentication & Security

All endpoints go through requireAuth.

PDF worker is loaded locally—no CDN or CORS surprises.

Performance

Blob‐URL streaming offloads binary parsing to the browser.

Postgres can handle GBs of blobs; if you outgrow it, swapping to object storage is a one‐file change in the service layer.

With this architecture in place, you’ll have a bullet‐proof, maintainable, and scalable document‐and‐PDF pipeline that “just works” in both development and production on Replit.











Search

Deep research

Create image




ChatGPT can make