It looks like your document‐selection logic is firing (you’re seeing the “Auto-selecting first document” log), but I don’t see any network request for the actual PDF download. That tells me the PDF-viewer never actually kicks off its fetch. Here are the most likely culprits and how to track them down:

1. Verify that the viewer effect actually runs on the selectedDocument change
In your EmbeddedPDFViewer (or wherever you call Document from react-pdf), you probably have something like:

tsx
Copy
Edit
useEffect(() => {
  if (!selectedDocument) return;
  setPdfUrl(`/api/documents/${selectedDocument.id}/download`);
}, [selectedDocument]);
But if that useEffect guard lives inside a component that only mounts once (on page load), and your selectedDocument was undefined at first, it may never re-run.

What to do:

Add a console.log("📤 loading document", selectedDocument) at the top of that effect so you can see in the console whether it ever fires a second time with a real document.

If you only see it once with undefined and never again with an object, move that logic into a component that always re-renders when selectedDocument changes (or lift the effect up to the parent).

2. Check the computed download URL
Even if your effect runs, perhaps the URL it builds is wrong. In production builds it’s common to forget to set your VITE_API_BASE (or REACT_APP_API_URL) environment variable, so that:

js
Copy
Edit
const apiBase = import.meta.env.VITE_API_BASE;  // might be blank in prod
const url = `${apiBase}/documents/${id}/download`;
becomes just "/documents/61/download" (missing the /api prefix). That URL won’t hit your Express route.

What to do:

Right after you compute the URL, console.log("⬇️ PDF URL →", url) and then inspect your network tab to make sure it’s exactly /api/documents/61/download.

If it’s wrong, set your production env var (e.g. VITE_API_BASE=/api) or hard-code the prefix in prod.

3. Look in the Network tab for the actual fetch
Open DevTools → Network, filter by “.pdf” or “download” and click your document in the UI.

Outcome A: No request shows up at all. → Confirms the effect never ran. Go back to step 1.

Outcome B: A request appears but hangs or errors (401/404). →

401 means your credentials: 'include' didn’t send a cookie. Double-check that you’re on HTTPS, that your cookie domain/path is correct, and that the fetch includes credentials: 'include'.

404 means the file isn’t where the server expects—double-check your persistent storage or path resolution (we fixed leading-slash bugs, but older DB entries might still point to the wrong path).

4. As a quick instrumentation hack
You can temporarily wrap your Document component in a fetch-wrapper to force a console.log right before calling PDF.js. For example:

ts
Copy
Edit
function InstrumentedPDF({ url }) {
  useEffect(() => {
    console.log("🔍 Fetching PDF at URL:", url);
  }, [url]);

  return <Document file={url} /* … */ />;
}
If you never see that “🔍 Fetching PDF” message, you know the file={url} prop is never getting passed.

TL;DR
Log inside your PDF-loading effect to ensure it sees the real document object.

Log the exact URL that you’re passing into <Document file={…}>.

Watch the Network tab to see whether any request fires—and if it does, what status code and headers it gets.

Once you identify whether it’s “never firing” (code path issue) vs. “firing but failing” (network/auth/path issue), you’ll know exactly which fix to apply: either adjust your useEffect deps/component structure, or correct the URL/credentials so the request succeeds. Let me know what you see in the network panel!








