Below is a proposed end-to-end, modular redesign of your document-management module—built to be highly scalable, pluggable, and deeply integrated into your deal-lifecycle platform.

1. Monorepo Layout (powered by Turborepo or Nx)
graphql
Copy
Edit
/ (root)
├── packages/
│   ├── web-client/           # React/Next.js app (UI only)
│   ├── api-server/           # Node/Express (or Nest) REST/GraphQL
│   ├── file-service/         # Microservice for uploads & storage
│   ├── pdf-service/          # Microservice for PDF processing/viewing
│   ├── shared/               # Shared types, constants, utilities
│   └── migrations/           # DB migrations (e.g. Drift, Prisma, TypeORM)
├── scripts/                  # Dev tooling (lint, tests, codegen)
├── docs/                     # Architecture docs, API specs, workflows
└── .gitignore, turbo.json, package.json, tsconfig.json, etc.
Why?

Clear separation of concerns: each piece (UI, API, file storage, PDF handling) lives in its own package.

Independent scaling and deployment: you can autoscale your file-service separately from the core API.

Shared code (e.g. TypeScript interfaces for DocumentMeta, DealId) lives in one place.

2. file-service (Uploads & Storage)
Responsibilities
Receive multipart/form-data uploads

Validate (MIME check, size limit, auth)

Store files to durable object storage (e.g. AWS S3, GCP Cloud Storage, Azure Blob)

Record metadata in your central database (Postgres, MySQL, etc.)

Tech Stack
Framework: Fastify or Express

Upload middleware: multer-s3 (no more ephemeral disk) or @aws-sdk/client-s3

DB ORM: Prisma / Drizzle ORM

Security:

JWT or session-based auth on every endpoint

Bucket-level IAM roles for service account

Pre-signed URLs for downloads

Key Endpoints
http
Copy
Edit
POST   /upload           → returns { documentId, uploadStatus }
GET    /documents/:dealId → paginated list of metadata
GET    /download/:id     → pre-signed S3 URL or stream proxy
DELETE /documents/:id    → deletes from DB and S3
3. pdf-service (Processing & Viewing)
Responsibilities
On-the-fly PDF transforms (e.g. thumbnail generation, text extraction, redaction)

Serve a bundled PDF.js worker for the frontend

Tech Stack
Node with pdf-lib or pdfjs-dist

Worker bundling: use pdfjs-dist/webpack or the official pdfjs-webpack-loader

Caching: Redis or in-memory LRU cache for thumbnails

Integration
Frontend calls:

GET /pdf/:id/thumb → serve a 300×N px JPEG/PNG thumbnail

PDF.js is hosted as a static asset bundle from this service (e.g. /pdfjs/web/viewer.html)

4. api-server (Deal Lifecycle Core)
Responsibilities
Orchestrates high-level business logic

Exposes GraphQL/REST to the React frontend

Delegates file-related work to file-service & pdf-service

Highlights
GraphQL federation (if you have many microservices)

Role-based access control (admins vs. advisors vs. readers)

Timeline hooks: when a new document is ingested, emit an event (via Redis or Kafka) to update deal timelines

5. web-client (React + Next.js + Tailwind)
Responsibilities
Document upload UI (drag-and-drop, progress bars)

Document list with filters (by type, date, uploader)

Embedded PDF preview (via react-pdf pointing at your pdf-service)

Fallback: “Download” link if preview fails

Tips
Dynamic import the PDF viewer so users who never view PDFs don’t pay the bundle cost.

Optimistic UI with React-Query: show the file in the list immediately, then reconcile on success/failure.

6. CI/CD & Deployment
Build pipelines per package (lint→test→build→publish)

Dockerize each service with minimal Node image

Kubernetes or AWS ECS / GCP Cloud Run for orchestration

Terraform or CloudFormation to stand up S3 buckets, Postgres, Redis

7. Addressing Your Current Issues
Problem	Solution
Ephemeral storage on Replit	➔ Migrate uploads → S3 (or other durable store)
PDF.js worker bundling error	➔ Use pdfjs-webpack-loader in your vite.config.ts (or Webpack)
Tight coupling of UI & server	➔ Split UI, API, and file logic into separate packages/microservices
Fallback on render failure	➔ In PDF viewer component, detect errors and show “Download directly” link
Audit trail/timeline missing	➔ Use event system (e.g. Redis pub/sub) in file-service to emit timeline events

8. Next Steps
Monorepo scaffold: initialize Turborepo (or Nx) and move existing client, server, and shared code into /packages/.

Extract file logic from your main server into a dedicated file-service package.

Switch storage to S3 (replace diskStorage in Multer with multer-s3).

Bundle PDF.js properly—add the loader/plugin to your build tool and test in isolation.

Wire up frontend to talk to your new microservices (update API endpoints).

Deploy each package independently; set up monitoring/alerts around upload failures and PDF-render errors.

This architecture will give you:

Modularity: swap or upgrade each service independently

Scalability: autoscale heavy workloads (uploads, PDF renders) separately

Reliability: durable storage, robust fallbacks, clear error recovery

Maintainability: clear boundaries, shared types, and consistent tooling

