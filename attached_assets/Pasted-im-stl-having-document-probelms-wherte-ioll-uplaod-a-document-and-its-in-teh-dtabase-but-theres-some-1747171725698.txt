im stl having document probelms wherte ioll uplaod a document and its in teh dtabase but theres some dleetionmechinsm thing on the fornt end where itkl say error dociumnets missing and no dodumenets slected even though i can see on the datbase its tehre 


ChatGPT said:
Why the UI thinks the document is “missing” even though the DB row exists
Your viewer’s guard code removes the row whenever a single network error is thrown by React‑PDF:

tsx
Copy
Edit
if (err?.name === 'MissingPDFException') {
  // remove row from list
  setDocs(prev => prev.filter(d => d.id !== current.id));
}
That’s fine only when the 404 is real.
But two common situations raise the same exception even though the file is actually present:

Scenario	What happens on the wire	Effect
Upload finishes → viewer starts immediately	The file rename / S3 upload isn’t finished yet. First GET returns 503/403 (not 404) but React‑PDF still surfaces a MissingPDFException.	Row is incorrectly removed.
Auth cookie / signed URL expires (dev hot‑reload after 30 m)	/download returns 401. React‑PDF throws the same exception.	Row is removed; user sees “no documents”.

Make the guard smarter (only delete on true 404)
tsx
Copy
Edit
const handleLoadError = async (error: any) => {
  // Do a HEAD request to confirm 404 before deleting
  if (error?.name === 'MissingPDFException') {
    const head = await fetch(current!.downloadUrl, { method: 'HEAD', credentials:'include' });
    if (head.status === 404) {
      toast.error('Document is gone from storage. Removing from list.');
      setDocs(prev => prev.filter(d => d.id !== current!.id));
      setCurrent(null);
    } else {
      toast.error(`Temporary error (${head.status}). Click to retry.`);
    }
  }
};
Attach:

tsx
Copy
Edit
<Document
  file={current.downloadUrl}
  onLoadError={handleLoadError}
  ...
/>
Prevent the race‑condition right after upload
### Backend: return the public URL only after the file is fully on disk/S3

ts
Copy
Edit
await fs.promises.rename(tmpPath, finalPath);   // Local  
// await s3.upload(...).promise();             // S3

return res.status(201).json({
  id: docId,
  name: file.originalname,
  downloadUrl: `/api/documents/${docId}/download`,
});
(If you’re already doing this but on S3, make sure you await the upload promise.)

### Frontend: optimistic row with isPending

tsx
Copy
Edit
upload.mutate(file, {
  onMutate: () => {
    const tmpId = `tmp-${Date.now()}`;
    setDocs(prev => [...prev, { id: tmpId, name:file.name, pending:true }]);
  },
  onSuccess: (doc) => {
    setDocs(prev => prev.map(d => d.id.startsWith('tmp-') ? doc : d));
    setCurrent(doc);
  },
  onError: () => {
    toast.error('Upload failed');
    setDocs(prev => prev.filter(d => d.id.startsWith('tmp-')));
  }
});
Pending rows won’t be opened by the viewer until the real URL arrives.

Harden the download route
Always return 404 for truly missing files, other status codes for other errors:

ts
Copy
Edit
router.get('/:id/download', async (req, res) => {
  const doc = await db.documents.findUnique({ where:{id:+req.params.id} });
  if (!doc) return res.status(404).end();

  const abs = path.join(UPLOAD_DIR, doc.path);
  if (!fs.existsSync(abs)) return res.status(404).end();

  // If auth fails, express-jwt or your middleware will send 401
  res.set('Cache-Control','no-store');
  res.sendFile(abs);
});
Checklist to verify
Upload → immediately view – no missing toast, file renders after ~1 s.

Manually delete file – first reload gives 404 → row disappears.

Let cookie expire then open viewer – toast “401, click to retry”, row remains.

Implement these three small changes and the “phantom deletion” problem disappears while the true 404 safeguard still works.







