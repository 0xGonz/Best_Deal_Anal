Backend
API Endpoints: The server exposes REST endpoints under /api/documents. Key routes include
GET /api/documents/deal/:dealId: Returns all documents for a deal (requires auth).
GET /api/documents/deal/:dealId/type/:type: Filters documents by type.
GET /api/documents/:id: Fetches a single document’s metadata.
POST /api/documents/upload: Handles file uploads via multer. It enforces authentication/permission, accepts form-data fields (dealId, documentType, optional description), and saves the file to disk. Supported MIME types are limited by ALLOWED_MIME_TYPES (e.g. PDF, DOCX, XLSX, images, ZIP, etc.)
github.com
. The code also uses fileTypeFromFile() to double-check that a PDF upload is actually PDF (rejecting masked files)
github.com
. Other types are accepted based on the client-set MIME; additional validation (e.g. for Office docs) could be added similarly.
GET /api/documents/:id/download: Streams the file to the client. The route sets Content-Type based on the stored document.fileType and an inline or attachment disposition (inline for PDFs)
github.com
. It then attempts to find the file on disk, checking multiple paths (see below).
DELETE /api/documents/:id: Deletes the document record (requires permission). The current implementation only deletes the DB record; it does not remove the file from disk (this could be an issue if orphaned files accumulate).
File Storage: Uploaded files are stored under data/uploads in the project (constant PERSIST_PATH = process.cwd() + '/data/uploads')
github.com
. At startup the code ensures these directories exist
github.com
github.com
. After upload, the server also copies the file into public/uploads (PUBLIC_PATH) for redundancy
github.com
. Note: despite the “persisted” naming, these paths live in the ephemeral filesystem on Replit. If the server process restarts or the workspace reboots, files under data/uploads are lost unless manually saved (a known Replit behavior).
Database Schema: Each document row stores fields like dealId, fileName (original name), fileType (MIME), fileSize, filePath (e.g. "uploads/<uuid-filename>"), uploadedBy, documentType, description, and uploadedAt. The code constructs filePath with no leading slash (e.g. "uploads/abcd.pdf")
github.com
 and saves it in the database via createDocument(). This filePath is treated as a relative path under the project root. The document’s actual filename (with UUID prefix) is derived from req.file.path (multer uses data/uploads by default)
github.com
github.com
.
File Naming & Path Resolution: Filenames are randomized with a UUID prefix for uniqueness (see storage setup in multer)
github.com
. The download route normalizes the stored filePath, stripping any leading slash if present, and then builds search paths:
<PERSIST_PATH>/<basename> (e.g. data/uploads/<file>)
<project>/public/<normalizedPath> (e.g. public/uploads/<file> if filePath was uploads/<file>)
<PUBLIC_PATH>/<basename> (public/uploads/<file>)
github.com
.
It checks each in turn (using fs.existsSync) and streams the first match back to the client
github.com
. If none exist, it performs an additional fallback scan of the upload directories to find a “best match” by filename similarity
github.com
github.com
. Finally, if still not found, it returns a 404 JSON error
github.com
. In practice, steps (2) and (3) resolve to the same path if filePath has no leading slash, making the second lookup redundant.
Missing File Handling: The code only responds with 404 after exhausting all file paths and fallback scans
github.com
. That means a client (like the PDF viewer) sees an actual stream attempt before receiving a 404, often triggering React-PDF’s MissingPDFException. A more efficient approach would be to check file existence up front and immediately 404 if not present. The backend does log detailed diagnostics (listing directory contents) before returning the 404
github.com
, which aids debugging but could be streamlined.
Error Handling: The upload route includes multer error handling and manual errors: it returns 400 for missing fields or invalid dealId
github.com
github.com
. If a file fails validation (wrong MIME), it deletes the temp file and sends a 400 with a custom error code
github.com
. The download route wraps streaming in try/catch and sends 500 JSON on stream errors
github.com
. However, the 404 case only happens at the end (see above), causing React-PDF to see a network 404 on fetch.
Frontend
Document Upload UI: The DocumentList component renders an Upload Document dialog with form fields for type, description, and file selection (supporting click or drag-and-drop)
github.com
github.com
. It restricts to one file. On selecting a file, the filename is shown with a remove button
github.com
. Upload is done via a native fetch('/api/documents/upload', ...) with a FormData payload
github.com
. On success it invalidates the document/deal queries and shows a toast, on failure it shows an error toast
github.com
. The UI lists allowed formats (PDF, DOCX, XLSX, PPTX, etc.) in the dialog prompt.
Document List & Sidebar: All fetched documents are displayed in a scrollable list. Each item shows an icon (e.g. file text icon), filename, type label, and size
github.com
github.com
. Clicking an item calls handleViewDocument(document), which marks it as selected (highlighting the row) and shows its preview below. Each item also has a small Download button (links to /api/documents/:id/download) and a Delete button (opens a confirmation dialog and then calls DELETE)
github.com
github.com
. The sidebar automatically selects the first document when loaded (via a useEffect that sets selectedDocument to documents[0] if none is selected)
github.com
.
PDF Viewer Configuration: The app uses react-pdf for rendering PDFs. In main.tsx, it imports ./lib/setupPdfWorker.ts early to configure the worker and includes the necessary CSS for text/annotation layers
github.com
. However, the existing setupPdfWorker.ts (not shown in this repo) apparently hard-codes an incorrect worker URL (e.g. /pdf.worker.js) and CDN fallbacks, which doesn’t work with Vite bundling. As a result, React-PDF falls back to a “fake worker” and fails to fetch the real one (error Failed to fetch dynamically imported module: pdf.worker.js?import)
github.com
. The default bundled worker version also doesn’t match the pdfjs-dist version, causing a version mismatch warning
github.com
.
EmbeddedPDFViewer: The EmbeddedPDFViewer component handles displaying the selected PDF. It constructs documentUrl = /api/documents/:id/download and checks if the filename looks like a PDF. It first tries to render with <PDFDocument file={documentUrl} onLoadError={handlePdfError}>
github.com
. On error, it logs the worker status and sets pdfFailed. If the error appears to be a 404/missing file, it shows a “Document Not Found” toast
github.com
. Otherwise it offers a fallback to a simple <iframe> by setting useDirectUrl=true. After an initial failure, it also does a fetch(...HEAD) to verify if the file truly exists; if it does, it switches viewer, and if it gets 404, it warns the user that the file is missing
github.com
github.com
. The UI then either retries PDF.js or falls back to an <iframe> viewer, or shows a detailed error screen with options to retry or download
github.com
github.com
.
Error Handling: Load errors in the PDF (caught by onLoadError) set an error state and display a toast via handlePdfError
github.com
. The fallback UI explicitly mentions common causes (deleted file, failed upload, corruption) and offers retry/download buttons
github.com
github.com
. Upload and delete actions also show success/error toasts
github.com
github.com
. However, the UI lacks accessible labels on some icon buttons (e.g. the zoom/retry icons have no aria-label), which could be improved for accessibility. The sidebar items do have aria-label attributes, but the PDF toolbar buttons (Retry, Download) rely on tooltips, not explicit labels.
State Persistence & Switching: DocumentList uses React Query to fetch data and local state to track the selected document. It also consumes a DocumentsContext (via useDocs) exposing { docs, current, setDocs, setCurrent }, but in the current code setDocs is never called. This means the context’s docs array is unused, and all rendering is done with the query result. The selected document is stored in the component’s state (selectedDocument), not the context, so switching between documents updates local state and re-renders the viewer. The useEffect reset in PdfViewer.tsx clears page count and error whenever the current (selected) doc changes
github.com
 (though in DocumentList the viewer is embedded, not the PdfViewer modal). In practice, selecting a new document resets the loader and error, as intended.
Problems Identified
Ephemeral Storage (Disappearing Files): The app writes uploads to data/uploads on the local filesystem
github.com
. On Replit (and many cloud hosts), this directory is not persisted across restarts. As seen in testing, a freshly uploaded PDF can display once, but after the server reloads, the file is gone (even though its DB record remains)
github.com
. Subsequent attempts yield a 404/MissingPDF. This causes “Missing PDF” errors in the viewer and requires re-upload.
PDF.js Worker Misconfiguration: The custom setupPdfWorker.ts currently uses a hard-coded path (/pdf.worker.js) and manual fallbacks for pdfjs-dist v4, which Vite does not bundle. React-PDF therefore ends up using a “fake worker” and failing to fetch the real worker script, resulting in console errors like Failed to fetch dynamically imported module: pdf.worker.js?import
github.com
. Additionally, the project’s bundled worker (v3.11.174) mismatches the installed pdfjs-dist (v4.8.69), causing version conflicts. In effect, the PDF.js worker never loads properly, breaking rendering for new documents.
File Path Issues in Download: The download handler’s path resolution has inconsistencies. The stored filePath is saved without a leading slash (e.g. "uploads/file.pdf"
github.com
), so the code’s normalization correctly uses it. However, the second lookup in filePaths duplicates the public path (both use public/uploads/filename when normalizedPath = "uploads/filename"). This redundancy isn’t harmful but indicates confusion. In earlier versions the DB sometimes had a leading “/”, which would cause path.join(process.cwd(),'public', document.filePath) to ignore public. The current code strips any leading slash
github.com
, fixing that bug. Still, relying on multiple fallback paths (including scanning directories) is complex and can be slow.
Missing Existence Checks: The server streams files as soon as it finds one, but only returns 404 after all attempts fail
github.com
. This means the client’s PDF fetch does not get an immediate “Not Found” – it only realizes after the request hangs/finishes with 404, triggering React-PDF’s MissingPDFException. Better practice would be to check file existence up front and return 404 immediately if missing (with a clear message), avoiding partial stream attempts. The current code logs all found files and directories on a miss
github.com
, which is useful for debugging but not ideal for performance or client clarity.
Tightly-Coupled Logic: The backend upload route mixes several concerns in one handler: authentication, field validation, file system operations, database writes, and timeline events all in one block
github.com
github.com
. Similarly, the download route includes streaming logic and a custom filename-matching algorithm. This makes the code hard to test and maintain. For example, creating directories is done both at startup and during upload (duplicate logic)
github.com
github.com
. The fallback “best match” search is clever but could be separated into a utility.
Repetitive Patterns: There are several near-duplicate code blocks. The download paths list contains both path.join(process.cwd(), 'public', normalizedPath) and path.join(PUBLIC_PATH, baseFilename) which may point to the same file
github.com
. The upload handler re-checks and re-creates directories that were already created on startup
github.com
github.com
. Client-side, the code memoizes none of the PDF viewer options (see [69] L18-21) – the options={{…}} object is re-created every render, triggering React-PDF warnings. Error toasts and dialogs in the UI sometimes duplicate checks already done on the server (e.g. missing file), leading to multiple error flows.
Performance/Reliability: The file-search fallback in the download route scans the entire uploads directories synchronously
github.com
github.com
. If there are many files, this could block the event loop and slow responses. Also, console-logging entire directory contents on failure
github.com
 may leak sensitive data into logs. On the frontend, heavy re-rendering could occur if the PDF Document isn’t memoized properly (as noted above), though that is a minor performance issue.
Recommendations
Use Persistent Storage: On Replit, store uploads in a guaranteed persistent location (e.g. the Replit-provided storage path, often process.env.REPLIT_STORAGE or a designated “replit-storage” directory) instead of the default working directory. For example, set const UPLOAD_DIR = path.join(process.env.REPLIT_STORAGE || process.cwd(), 'uploads'), and update PERSIST_PATH to use UPLOAD_DIR
github.com
. Ensure this path exists on startup. This change will prevent files from vanishing on restarts. Alternatively, integrate a cloud storage (S3, etc.) or a database/blob store for files if multi-server scaling is needed.
Fix PDF Worker Setup: Update client/src/lib/setupPdfWorker.ts to let Vite bundle the correct worker. For example (React-PDF v5+):
import { pdfjs } from 'react-pdf';
import workerURL from 'pdfjs-dist/build/pdf.worker.min.js?url';
pdfjs.GlobalWorkerOptions.workerSrc = workerURL;
Remove any hard-coded '/pdf.worker.js' fallback. This uses Vite’s ?url import so the worker file is included in the build
github.com
. After this, confirm that the network tab loads pdf.worker.min.js with 200 OK and that the “fake worker” warning disappears. Also ensure any PDF.js version mismatch is resolved by using the same pdfjs-dist version as React-PDF expects (or upgrade React-PDF if needed)
github.com
github.com
.
Simplify Download Path Logic: Since filePath is always stored without a leading slash (e.g. "uploads/..."
github.com
), you can simplify path resolution:
const normalized = document.filePath.replace(/^\/+/, '');
const filePaths = [
  path.join(PERSIST_PATH, path.basename(normalized)), 
  path.join(process.cwd(), 'public', normalized)
];
Remove the duplicate third entry. Before streaming, check if neither file exists and immediately return 404. For example:
if (!fs.existsSync(filePaths[0]) && !fs.existsSync(filePaths[1])) {
  return res.status(404).json({ error: 'File not found', message: '...' });
}
This avoids unnecessary scanning/fallback on a known missing file.
Modularize File Handling: Extract file-system logic into a helper or service. For example, create functions like ensureUploadDirs(), saveUploadedFile(req.file), and findDocumentFile(document). This makes documents.ts cleaner and easier to test. The current router mixes HTTP logic with disk I/O. Also, consider deleting or archiving files when a document is deleted (the DELETE route currently doesn’t remove the disk file, potentially leaving orphan files).
Enhance Validation: Currently only PDF uploads are validated by fileTypeFromFile. Extend content validation to other types if security is a concern (e.g. check that .docx is indeed a zip/Word, etc.). Also enforce max file counts and sizes on the client side if not already done. Ensure the front-end warns the user if an unsupported file type is chosen.
Improve Error Propagation: Send clear error statuses early. For instance, in the download route, do an existence check at the top and respond with 404 if missing (avoiding partial stream). On the frontend, catch this and show a user-friendly message. Also, on the upload route, if the DB insert or file copy fails, ensure the error is returned (currently some errors may fall through to a generic 500). Use structured logging or a monitoring tool instead of console.log for production, to avoid exposing internals.
Optimize Frontend State: If using DocumentsContext, actually store the document list and current selection in context to avoid redundant state in DocumentList. For example, after fetching documents via React Query, call setDocs and setCurrent in context. This ensures a single source of truth and could simplify component hierarchy. Currently, setDocs is defined but never used
github.com
. Also, memoize props to <PDFDocument> (e.g. the options object) to avoid unnecessary re-renders and warnings
github.com
. For icons/buttons, add aria-label attributes (e.g. <Button aria-label="Zoom In">) to improve accessibility.
Refine Performance: Avoid synchronous directory scans. Instead of brute-force matching filenames, rely on the saved filePath and known directories. If more sophisticated matching is needed (e.g. for renamed files), consider indexing or metadata, not scanning every request. In the PDF viewer, if only one page is shown, consider lazy-loading additional pages on demand. Also, the upload handler reads and copies files synchronously; you may use async I/O or streams for large files.
Robust Logging & Monitoring: Replace console.log with a configurable logger (e.g. Winston or Pino) that can write to files or services. Ensure errors include context (user ID, document ID) but no sensitive info. This will help diagnose issues like missing files or misconfigurations in production without manual console inspection.
By addressing the above, the document pipeline will be more reliable and maintainable: files won’t vanish after restarts, the PDF viewer will load consistently, and errors will be caught and reported cleanly. Clear separation between storage, database, and HTTP layers will also make future enhancements (like support for new file types or scaling to S3) much easier.