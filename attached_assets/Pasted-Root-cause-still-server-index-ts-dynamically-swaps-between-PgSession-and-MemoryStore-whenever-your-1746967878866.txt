Root cause (still)
server/index.ts dynamically swaps between PgSession and MemoryStore whenever your health‚Äëcheck decides the DB is ‚Äúunhealthy‚Äù.
When the store switches, the old cookie¬†‚á¢¬†session row pairing is lost, so the next /api/auth/me returns 401 even though the cookie is still sent.

Because Replit‚Äôs ‚Äúalways‚Äëon‚Äù container spins down idle Postgres connections, your health‚Äëcheck occasionally times out for‚ÄØ1‚Äì2‚ÄØseconds, flips usingDatabase‚ÄØ‚áí‚ÄØfalse, and you fall back to MemoryStore.¬†That‚Äôs exactly the window where your second /me call lands.

ü©π¬†Quick, production‚Äësafe fix
Commit this patch (abridged for clarity):

diff
Copy
Edit
// server/index.ts
-import { getSessionStore } from "./utils/getSessionStore";
-
-// ‚Ä¶
-app.use((req, res, next) => {
-  // CHANGES STORE ON EVERY REQUEST (‚ùå)
-  session({
-    store: getSessionStore(),   // ‚Üê remove dynamic call
-    // ‚Ä¶
-  })(req, res, next);
-});

+import MemoryStore from "memorystore";
+import { PgSession } from "connect-pg-simple";
+
+// Decide **once** at boot:
+const useMemory =
+  process.env.USE_MEMORY_SESSIONS === "true" || process.env.NODE_ENV !== "production";
+
+const sessionStore = useMemory
+  ? new MemoryStore(session)({
+      checkPeriod: 86400000,          // prune daily
+    })
+  : new PgSession({
+      pool,                           // your pg.Pool
+      tableName: "session",
+      createTableIfMissing: true,
+    });
+
+app.use(
+  session({
+    store: sessionStore,
+    secret: process.env.SESSION_SECRET!,
+    name: "dlf.sid",
+    resave: false,
+    saveUninitialized: false,
+    rolling: true,
+    cookie: {
+      secure: process.env.NODE_ENV === "production",
+      sameSite: "lax",
+      httpOnly: true,
+      maxAge: 7 * 24 * 60 * 60 * 1000, // 7‚ÄØdays
+    },
+  }),
+);
Drop getSessionStore() and any ‚Äúfallback‚Äù logic; if the DB dies you‚Äôll see a 500 (correct), not a silent auth failure.

üö¶¬†If you must keep the fallback (not recommended)
Mirror the session row into both stores instead of switching pointer objects.

Or set a short‚Äëlived JWT in a httpOnly cookie at login and let /api/auth/me verify that instead of hitting the DB.

But for 99‚ÄØ% of REPL / Railway / Render dev workflows, a MemoryStore in dev and a PgSession in prod (chosen once) is perfect.

üß™¬†Verify locally in Replit
bash
Copy
Edit
# 1. Install pg locally (or point DATABASE_URL to supabase/neon)
export USE_MEMORY_SESSIONS=true  # while testing

pnpm dev    # or `npm run dev`

# In a second shell:
curl -i http://localhost:3000/api/auth/me   # 401 initially
# ‚Üí login via UI
curl -i --cookie "dlf.sid=<value>" http://localhost:3000/api/auth/me
# ‚Üí keep retrying; should stay 200 even after minutes
Add a Jest/Supertest integration test:

ts
Copy
Edit
it("keeps the user logged in across multiple requests", async () => {
  const agent = request.agent(app);          // persists cookies
  await agent.post("/api/auth/login").send({ user, pass }).expect(200);
  await agent.get("/api/auth/me").expect(200);
  await new Promise(r => setTimeout(r, 5000));     // simulate time passing
  await agent.get("/api/auth/me").expect(200);     // should still work
});
Next steps after the patch
Remove requireAuth from endpoints that truly are public, or conversely make all investment‚Äëdata routes authenticated so failures surface quickly.

Add pino or winston logging around healthCheck so you can see exactly when (and why) it flags databaseConnected=false.

Document required env vars in .env.example so others don‚Äôt resurrect the dynamic store by mistake.

Ping me once you push the change‚Äîhappy to re‚Äëtest or help tighten any other loose ends!