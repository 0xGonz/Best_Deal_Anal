Why the banner is still there
Your front-end is recomputing status like this:

ts
Copy
Edit
const called = sumBy(allocation.capitalCalls, 'amount');

const expected =
    called === 0               ? 'committed'
  : called <  allocation.amount ? 'partially_paid'
  :                               'funded';

if (allocation.status !== expected) {
  throw new Error('status inconsistency detected');
}
You just proved the database row still says funded even though
called (1 M) < amount (2.5 M).
So the back-end never updated the column (or never switched to the view).

That means the SQL migration/trigger/view was not applied or the API is still selecting from the raw table.

1 — Confirm what your API is returning
Run this exact curl and paste the JSON it prints:

bash
Copy
Edit
curl -s http://localhost:3000/api/production/allocations/<ID> | jq
You should see both:

json
Copy
Edit
{
  "amount":        2500000,
  "capitalCalls": [ { "amount": 1000000, … } ],
  "status":       "funded"      <-- still wrong
}
If the status is wrong there, the UI is innocent; the service is still reading the old column.

2 — Pick ONE of the two server-side fixes and finish wiring it
If you wanted	Do this
Option A: derived view	▸ Make sure the view exists:
\d+ vw_fund_allocations in psql.
▸ In allocation.service.ts change every db.selectFrom('fund_allocations') to 'vw_fund_allocations' (or create a Drizzle model that maps to that view).
Option B: trigger that updates the column	▸ Verify trigger exists:
\d+ capital_calls should list trg_capcall_sync.
▸ Run one manual capital-call update to fire it:
update capital_calls set amount = amount where allocation_id = <ID>;
(or insert a $0 row and delete it).
▸ Re-query — the status column in fund_allocations should now be partially_paid.

3 — Back-fill existing rows once
If you chose Option B the trigger only fires on future inserts/updates.
Run this once to synchronise everything that already exists:

sql
Copy
Edit
update fund_allocations a
set    status = case
                  when c.called = 0          then 'committed'
                  when c.called < a.amount   then 'partially_paid'
                  else                           'funded'
                end
from  (select allocation_id, sum(amount) called
       from capital_calls
       group by allocation_id) c
where a.id = c.allocation_id;
4 — Invalidate the React Query cache after you change the DB
ts
Copy
Edit
queryClient.invalidateQueries(['allocations']);
queryClient.invalidateQueries(['funds']);
Make sure this runs after you apply the migration or trigger so the UI fetches fresh data.

5 — Double-check
SELECT status FROM fund_allocations WHERE id = <ID>; → partially_paid

curl /api/production/allocations/<ID> → "status":"partially_paid"

Hard-refresh the browser (Shift+Reload) → banner gone.

Quick diagnostic if it’s still wrong
Test	Expected	If not, what’s still broken
\d+ vw_fund_allocations	lists columns	View name typo or created in a different schema.
\d+ capital_calls	lists trg_capcall_sync	Trigger not created (migration didn’t run).
select * from pg_trigger where tgname='trg_capcall_sync'	1 row	Same as above.
allocation.service.ts	uses view OR updates column	Service still reading raw table.

Once those three layers match, the “status inconsistency detected” toast disappears permanently.
Let me know which path (view or trigger) you’re using and share any server console errors if it still doesn’t update after the steps above.