Here‚Äôs a focused plan to chase down that ‚ÄúPDF file is empty‚Äù issue in your production Replit + Neon environment and lock in a bullet-proof, end-to-end flow.

1. Verify Your DB Blobs Are Non-Empty
First, let‚Äôs confirm whether your file_data really contains PDF bytes in production. Add a tiny debug endpoint right next to your download route:

ts
Copy
Edit
// server/routes/documents.ts
router.get('/:id/debug', requireAuth, async (req, res, next) => {
  const doc = await docSvc.getDocument(+req.params.id);
  if (!doc) return res.status(404).json({ error: 'Not found' });

  const size = doc.fileData.byteLength || Buffer.byteLength(doc.fileData);
  return res.json({
    id: req.params.id,
    fileName: doc.fileName,
    fileType: doc.fileType,
    dataLength: size,
    header: doc.fileData.slice(0, 16).toString('ascii').replace(/\0/g, ''),
  });
});
Deploy that change.

In your browser or via curl, visit:

bash
Copy
Edit
GET https://<your-app>/api/documents/65/debug
Confirm dataLength is > 1 KB (ideally tens of KB or more) and header starts with %PDF-.

If you see dataLength: 0 or header is empty/garbage, the problem lives in your upload path: you‚Äôre saving an empty buffer.

If you see a proper length and header, but the viewer still errors, then the issue is on your download or client fetch.

2. Fix the Upload Path (if dataLength is zero)
In your upload route (with Multer‚Äôs memoryStorage), right after you get req.file, log and validate:

ts
Copy
Edit
// server/routes/documents.ts
router.post('/', requireAuth, upload.single('file'), async (req, res, next) => {
  const { originalname, mimetype, buffer } = req.file!;
  console.log('üîç uploaded buffer length:', buffer.byteLength);
  if (!buffer || buffer.byteLength === 0) {
    return res.status(400).json({ error: 'Empty file upload' });
  }
  const doc = await docSvc.saveDocument(+req.body.dealId, originalname, mimetype, buffer);
  res.json(doc);
});
Ensure buffer.byteLength is non-zero in your Replit logs whenever you upload.

If you see 0, check your form submission: is the <input type="file" name="file"> being sent correctly? Did you add enctype="multipart/form-data" on your HTML form or set Content-Type: multipart/form-data in your fetch/axios call?

3. Confirm Download Streaming (if debug shows good data)
If your debug endpoint reports a correct size and %PDF-1.x header:

Test with curl:

bash
Copy
Edit
curl -I https://<your-app>/api/documents/65/download
Content-Length should match dataLength.

Content-Type must be application/pdf.

In the browser Network tab, click the download URL from your viewer, look at the Response payload‚Äîensure it‚Äôs binary PDF, not HTML or empty.

4. Client-Side Blob Fetch
Make sure your React code actually reads the Blob and hands a real URL to PDF.js:

ts
Copy
Edit
// client/src/components/PDFViewer.tsx
useEffect(() => {
  if (!selected) return;
  downloadDocument(selected.id)
    .then(blob => {
      console.log('üì¶ received blob size:', blob.size);
      if (blob.size === 0) throw new Error('Empty blob');
      setUrl(URL.createObjectURL(blob));
    })
    .catch(err => console.error('PDF fetch error:', err));
}, [selected]);
Check in your browser console that blob.size matches the size you saw in your debug endpoint.

5. Production Checklist
[ ] Run /api/documents/:id/debug in production ‚Üí confirm non-zero dataLength and %PDF-‚Ä¶ header.

[ ] Upload a fresh PDF via your UI ‚Üí watch uploaded buffer length: in server logs.

[ ] Re-test /debug for the new ID ‚Üí should match upload size.

[ ] Hit the /download URL via curl or Network tab ‚Üí binary PDF stream.

[ ] In React, verify blob.size matches and no ‚ÄúEmpty blob‚Äù error.

[ ] Confirm PDF pages render in your <Document> component.

[ ] Redeploy or restart your Replit container ‚Üí repeat steps 1‚Äì6 to ensure persistence.

By stepping through these validations you‚Äôll pinpoint exactly whether the issue lives in the upload, the database blob, the download route, or the client fetch‚Äîand then lock it down so your production deployment never again serves an empty PDF. Let me know what your /debug endpoint reports and we can nail the final fix!