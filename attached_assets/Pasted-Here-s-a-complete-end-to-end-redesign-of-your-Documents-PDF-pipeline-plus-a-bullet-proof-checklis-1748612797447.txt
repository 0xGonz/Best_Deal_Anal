Here‚Äôs a complete end-to-end redesign of your Documents ‚Üí PDF pipeline, plus a bullet-proof checklist to get you from ‚Äústill broken‚Äù to ‚Äúworks in production.‚Äù

1. End-to-End Audit
Upload & Persistence

Multer writes into an ephemeral uploads/ folder.

DB records point at uploads/<filename>.

On restart or redeploy, that folder is wiped‚Äîold files vanish or get replaced by tiny stubs.

Download Route

Your API still tries a search through multiple folders (uploads/‚Ä¶, public/uploads/‚Ä¶, data/uploads/‚Ä¶), picks the first match, streams it.

Right now that first match is a 1.6 KB stub PDF (or even index.html), so PDF.js chokes with ‚ÄúInvalid PDF structure.‚Äù

Static/Catch-all Ordering

If Express mounts the React static build or a wildcard app.get('*') before /api, any ‚Äúmissed‚Äù API path returns HTML, not JSON or PDF.

PDF.js Worker

You‚Äôve successfully bundled it via Vite‚Äôs ?url import (/pdf.worker.min.js), so the worker now loads.

But since the payload it parses is invalid, it errors out after indexing.

2. Proposed Modular Redesign
A) Persistent Storage
Directory: use something like path.join(__dirname, '../data/uploads') for all uploads.

Multer configuration:

js
Copy
Edit
const UPLOAD_DIR = process.env.UPLOAD_DIR || path.join(__dirname, '../data/uploads');
fs.mkdirSync(UPLOAD_DIR, { recursive: true });
const storage = multer.diskStorage({
  destination: (_req, _file, cb) => cb(null, UPLOAD_DIR),
  filename: (_req, file, cb) => {
    const safeName = file.originalname.replace(/\s+/g,'-');
    cb(null, `${Date.now()}-${safeName}`);
  }
});
DB: store only the basename ("1630412345678-MyFile.pdf"), not the full path.

Migration: move any existing uploads/*.pdf into data/uploads/, update DB records to the new basename. Or simply re-upload files into the new directory.

B) API Routing Order
In your server bootstrap (index.ts or app.js):

ts
Copy
Edit
// 1. All /api routes first:
app.use('/api', apiRouter);

// 2. Serve client build:
const CLIENT_DIST = path.join(__dirname, '../client/dist');
app.use(express.static(CLIENT_DIST));

// 3. Fallback ‚Äì only for non-/api paths:
app.get('*', (req, res) => {
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({ error: 'Not found' });
  }
  res.sendFile(path.join(CLIENT_DIST, 'index.html'));
});
C) Download Handler
ts
Copy
Edit
router.get('/documents/:id/download', requireAuth, async (req, res) => {
  const doc = await Document.findByPk(req.params.id);
  if (!doc) return res.status(404).json({ error: 'Document not found' });

  const fileName = path.basename(doc.filePath);
  const fullPath = path.join(UPLOAD_DIR, fileName);
  if (!fs.existsSync(fullPath)) {
    return res.status(404).json({ error: 'File missing on disk' });
  }

  res
    .type(doc.fileType)
    .set({
      'Content-Disposition': `inline; filename="${doc.fileName}"`,
      'Cache-Control': 'no-store, must-revalidate',
      'X-Content-Type-Options': 'nosniff',
    })
    .sendFile(fullPath);
});
Key: sendFile (or piping a ReadStream) ensures you only ever return real PDF bytes or a clear JSON 404.

D) PDF.js Worker Setup (Client)
client/src/lib/setupPdfWorker.ts:

ts
Copy
Edit
import { pdfjs } from 'react-pdf';
import workerUrl from 'pdfjs-dist/build/pdf.worker.min.js?url';

pdfjs.GlobalWorkerOptions.workerSrc = workerUrl;
console.log('‚úÖ PDF.js worker configured as:', workerUrl);
Import this once in your app entry (main.tsx), before any <Document>.

E) DocumentViewer Component
tsx
Copy
Edit
import React, { useEffect, useState } from 'react';
import { Document, Page } from 'react-pdf';
import { useDocuments } from '../context/DocumentContext';

export const PDFViewer = () => {
  const { selected } = useDocuments();
  const [url, setUrl] = useState<string|null>(null);

  useEffect(() => {
    if (selected?.fileType === 'application/pdf') {
      console.log('üì§ Loading PDF document:', selected.downloadUrl);
      setUrl(selected.downloadUrl);
    }
  }, [selected]);

  if (!url) return <div>Select a PDF document</div>;
  return (
    <Document
      file={url}
      onLoadError={e => console.error('PDF load error:', e)}
    >
      <Page pageNumber={1} />
    </Document>
  );
};
3. üîñ Final Fix Checklist
[ ] Pin pdfjs-dist version in client/package.json (e.g. "4.8.69").

[ ] Remove all leftover uploads/ or public/uploads/ from dev‚Äîstart fresh in data/uploads.

[ ] Configure Multer to write to data/uploads, and fs.mkdirSync that folder on startup.

[ ] Migrate or re-upload your PDF files into data/uploads.

[ ] Store only basenames in DB (doc.filePath = <basename>).

[ ] Mount /api router before express.static and the wildcard catch-all.

[ ] Harden download route: only serve real files or return JSON 404.

[ ] Implement setupPdfWorker.ts with Vite‚Äôs ?url import and import it once at app init.

[ ] Clean up front-end overrides‚Äîno more CDN or manual workerSrc in components.

[ ] Rebuild & redeploy both client (npm run build) and server.

[ ] Smoke-test in browser:

/assets/pdf.worker.*.js ‚Üí 200 JS

/api/documents/:id/download ‚Üí 200 PDF, correct headers, non-HTML body

UI ‚Üí PDF renders pages

[ ] Test error paths: missing document ID yields JSON 404 (and a friendly UI message).

Following these steps will lock down persistence, routing, file integrity and PDF rendering. Once you complete them, your ‚ÄúLoading PDF‚Ä¶‚Äù spinner will finally give way to a fully rendered document‚Äîevery time. Good luck, and let me know when you‚Äôre across the finish line!








