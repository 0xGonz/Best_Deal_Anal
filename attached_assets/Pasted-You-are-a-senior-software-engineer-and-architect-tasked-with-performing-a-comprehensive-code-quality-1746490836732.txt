You are a senior software engineer and architect tasked with performing a comprehensive code quality and structural review of the entire application codebase within this Replit environment. Your goal is to identify specific code issues and evaluate the overall architecture based on key principles, compiling a detailed report first, and then addressing the findings iteratively.

**Phase 1: Full Codebase Analysis and Comprehensive Reporting (NO CODE CHANGES)**

Conduct a meticulous, line-by-line and module-by-module (file-by-file) review of the *entire* application codebase. Your objective in this phase is strictly to identify and report issues; you will make absolutely *no* changes to the code at this stage.

Analyze the code to identify all instances of the following:

1.  **Errors and Potential Bugs:** Syntax errors, logical errors, potential runtime exceptions, off-by-one errors, incorrect handling of edge cases, and other common bug patterns.
2.  **Code Redundancies and Duplication:** Repeated code snippets, functions, classes, or logic blocks that could be consolidated or refactored.
3.  **Hardcoded Data:** Any data values directly embedded in the code that should be dynamic, configurable, or externalized (strings, numbers used for settings, file paths, URLs, credentials, etc.). Reiterate the principle that **all data should be pulled from uploaded/stored data or external APIs and never hardcoded.**
4.  **Unused Code:** Variables, functions, classes, imports, or any code elements that are defined but appear to be unused or unreachable.
5.  **General Code Smells/Bugs:** Any other patterns that indicate potential issues, inefficiencies, or deviations from best practices that could lead to bugs.

In parallel with identifying these specific issues, evaluate the codebase's **Modularity and Integration**:

* **Modularity:** How well is the codebase divided into logical, independent units (modules, components, functions)? Do these units have clear, single responsibilities? Are dependencies between modules minimized?
* **Integration:** How do different parts of the application connect and interact with each other? Are interfaces between modules clear? Is the flow of data and control between components easy to understand and maintain? Does the codebase avoid tight coupling, allowing components to be understood and potentially reused or replaced independently? (Note: While the user mentioned "everything connects to everything," the goal of modularity implies clear, managed connections, not a tangled web. Focus on *clean* and *well-defined* integration points between independent modules.)

Compile a single, comprehensive report listing *all* findings from this analysis. Group issues by type (Errors/Bugs, Redundancies, Hardcoded Data, Unused Code, Modularity/Integration Issues). For each specific code issue (Errors, Redundancies, Hardcoded Data, Unused Code), provide the **File Name** and **Line Number(s)** and a brief **Description of the Issue**. For Modularity/Integration, describe the observations and concerns at a higher level, referencing specific areas or patterns as examples.

**Do NOT propose solutions or make any code modifications during Phase 1.** Your only task in this phase is to find and list *all* relevant issues and provide the architectural assessment.

Once you have completed the scan of the entire codebase and compiled the complete report, present this report to me. Clearly indicate that Phase 1 is complete and you are ready to move to Phase 2.

**Phase 2: Iterative Resolution and Improvement (ONE FIX/IMPROVEMENT AT A TIME)**

After you have presented the complete report from Phase 1 and I acknowledge it, we will begin Phase 2. In this phase, you will go through the list and assessment you generated, addressing each issue or suggesting improvements one by one.

For each item from the report in Phase 1:

1.  **Announce Item:** State which issue or area for improvement you are currently addressing from the report.
2.  **Propose Action:**
    * For specific code issues (Errors, Redundancies, Hardcoded Data, Unused Code): Clearly describe the specific code change you will make to fix *only this single issue*. Explain the reasoning. Include the exact code snippet(s) you will modify or add.
    * For Modularity/Integration points: Propose a specific refactoring step or code reorganization to address the identified concern. Explain how this change improves modularity, integration clarity, or adherence to the "no hardcoding" principle. Include relevant code snippet(s) or describe the structural changes.
3.  **Implement Change:** **Apply the proposed code change or structural refactoring directly to the relevant file(s) in the codebase.**
4.  **Confirm:** Confirm that the change for this specific issue or improvement area has been successfully implemented.

You will then proceed to the next item on the report, repeating steps 1-4, until all points from the Phase 1 report have been addressed.

If addressing an issue or improvement significantly impacts other items on the list, highlight this and suggest how we should proceed (e.g., re-evaluating subsequent steps, addressing related issues together).

**Begin Phase 1 now: Start scanning the entire codebase for errors, redundancies, hardcoded data, unused code, and bugs, and evaluate modularity and integration. Compile the complete report. Remember: NO code changes in Phase 1.**