The pdf.js stack trace has changed again—this time it’s not a worker issue.
MissingPDFException simply means the browser tried to GET the file and received 404 Not Found (or 0 bytes).

mathematica
Copy
Edit
Missing PDF "…/api/documents/9/download"
Everything else (API calls, auth, avatars, stars) is OK.

What’s going wrong
Layer	What we see	What it means
Client	React‑PDF requests /api/documents/9/download.	URL is constructed correctly.
Network	pdf.js reports “Missing PDF…”. It only throws that if the fetch resolves with status !== 200 or empty body.	The backend isn’t returning the file.
Server	Either the route /api/documents/:id/download returns 404, or it returns 200 but streams nothing.	File path or storage lookup is broken for document ID 9.

Quick triage checklist
Open DevTools → Network
Reload the page, click the PDF again.
Look for /api/documents/9/download

Status 404 → File record exists in DB but physical file missing.

Status 200 (0 B) → Stream opened but no file data—path wrong or read‑error.

Status 403 / 302 → Auth redirect or CORS issue.

Inspect the documents table (or wherever you store file metadata)

sql
Copy
Edit
SELECT id, original_filename, storage_path, mime_type
FROM documents
WHERE id = 9;
Does storage_path point to something that still exists?

If you restarted Replit recently, an uploads folder mounted to /tmp may have been wiped.

Confirm the Express route

ts
Copy
Edit
router.get('/documents/:id/download', async (req, res) => {
  const doc = await storage.getDocumentById(req.params.id);
  if (!doc) return res.status(404).end();
  res.sendFile(path.resolve(doc.storagePath));
});
Make sure path.resolve points to an absolute path, not a relative one that changes once Vite dev server or PM2 spawns.

Static vs streaming

If you intended to serve documents through express.static('/uploads'), verify that middleware is mounted before your API routes and that the uploads folder is inside the Replit project workspace—not in a temp dir.

Common causes & fixes
Cause	Fix
File lost after container restart (Replit wipes /tmp//home/runner/tmp)	Store uploads under /home/runner/<project>/uploads or push them to S3 / Supabase Storage.
DB row exists but path typo (/upload vs /uploads)	Run a migration/update to correct storage_path.
Route builds wrong filename (${id}.pdf but you saved ISP_Pest_Deck.pdf)	Store full path in DB and use it directly, or add a downloadUrl field in the API response.
Auth middleware blocks file	Allow same‑session cookie for file routes or issue a presigned URL.

How to make it bullet‑proof
Return a presigned or absolute downloadUrl when you list documents:

jsonc
Copy
Edit
// GET /api/documents/deal/83
[{
  id: 9,
  name: "ISP_Investor_Deck.pdf",
  downloadUrl: "/api/documents/9/download"  // or S3 presigned URL
}]
Then the viewer uses exactly that URL—no client‑side string building.

Add a HEAD check in your upload service so every saved record guarantees the file exists.

Unit test the download endpoint:

ts
Copy
Edit
await supertest(app)
  .get('/api/documents/9/download')
  .expect(200)
  .expect('Content-Type', /pdf/);
Next step
Open the Network tab and confirm the HTTP status & payload size of /api/documents/9/download.
Based on that, you’ll know whether it’s:

404 → file missing or wrong path → check storage.

200 / 0 B → path points to empty file → re‑upload.

403 → auth/cookie headers on file route.

Tell me what status you see and I’ll give you the precise patch (route fix, upload re‑config, or DB update) to get the PDF streaming again.







