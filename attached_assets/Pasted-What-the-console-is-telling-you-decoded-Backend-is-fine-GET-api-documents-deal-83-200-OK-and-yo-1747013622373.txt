What the console is telling you (decoded)
Backend is fine
GET /api/documents/deal/83 → 200 OK and you receive an array with one document object. So the PDF metadata fetch works.

The front‑end PDF viewer then tries to spin‑up a Web Worker shipped by pdf.js / react‑pdf.

makefile
Copy
Edit
Warning: Setting up fake worker.
Error: Setting up fake worker failed:
        "Failed to resolve module specifier 'pdf.worker.mjs'"
pdf.js falls back to a “fake worker” when it can’t load the real one.

Because Vite (the dev bundler Replit uses) can’t resolve pdf.worker.mjs, the fallback also fails → the viewer throws “Error loading PDF”.

All the ProtectedRoute … Rendering component lines are just your own routing logs—unrelated.

Why it happens
pdf.js puts the heavy parsing logic in a separate file (pdf.worker.js / pdf.worker.mjs).

Bundlers (Vite, Webpack, Next, etc.) don’t automatically know how to copy that worker file and return the correct URL.

If GlobalWorkerOptions.workerSrc isn’t set to a valid, build‑time‑resolved path, pdf.js can’t locate it, so you see the “fake worker” warning → runtime failure.

Two quick, battle‑tested fixes (pick one)
Fix A — 3‑line patch inside your PDF viewer component (works with Vite + React‑PDF v7)
tsx
Copy
Edit
// src/components/DocumentViewer.tsx (or wherever you import react‑pdf)
import { pdfjs } from 'react-pdf';               // 1️⃣
import workerSrc from 'pdfjs-dist/build/pdf.worker?url'; // 2️⃣ Vite copies the file and returns its URL

pdfjs.GlobalWorkerOptions.workerSrc = workerSrc; // 3️⃣ Tell pdf.js where the worker lives
?url is a Vite‑specific query that tells Rollup to emit the file and give you the URL string.

Works in both dev and build modes.

Fix B — use the special “entry.vite” bundle that already wires the worker
If you’re on react‑pdf 7.x you can swap your imports:

tsx
Copy
Edit
// BEFORE
import { Document, Page } from 'react-pdf';

// AFTER (notice the path difference)
import { Document, Page } from 'react-pdf/dist/esm/entry.vite';
That bundle auto‑registers the worker with Vite—no extra code.

If you’d rather host the worker yourself (fallback)
Copy the file from node_modules/pdfjs-dist/build/pdf.worker.min.js into /public/pdf.worker.min.js.

At app startup:

ts
Copy
Edit
import { pdfjs } from 'react-pdf';
pdfjs.GlobalWorkerOptions.workerSrc = '/pdf.worker.min.js';
Bonus hardening (recommended)
Risk	Mitigation
Large bundle size – pdf.js adds ≈ 300 kB	Lazy‑load the viewer route (React.lazy) so normal pages don’t pay the cost.
CORS errors in prod	Keep the worker file in the same origin (/public/...) or the Vite ?url trick; avoids cross‑origin fetches.
Breaking upgrades	Lock pdfjs-dist and react-pdf to the same major version in package.json (e.g., "pdfjs-dist": "4.3.136", "react-pdf": "7.3.1").

TL;DR
Your API and routing are good—the PDF fails because pdf.js can’t find its Web Worker.
Add three lines (Fix A) or switch to entry.vite (Fix B) and the “Setting up fake worker failed” error disappears.

Let me know once you patch it—if you hit any build‑time issues or blank pages I can step through the next layer (lazy loading, bundle analysis, etc.).