Below is a start-to-finish audit of your Documents module—from upload, through storage and download, all the way to PDF rendering in the browser—followed by a concrete, modular redesign and a step-by-step fix checklist to get everything working reliably in production.

1. End-to-end audit
Layer	What’s happening	Why it’s failing
Upload	Multer’s disk storage writes files to uploads/ (and a bunch of other candidate paths) and you record filePath: "uploads/…" in the DB.	✅ Uploads work (your logs show “Document uploaded successfully”).
Storage	storage.createDocument persists DB record with that filePath.	✅ DB record is correct.
Download	GET /api/documents/:id/download looks up the DB, builds a long list of possible on-disk paths (uploads/…, public/uploads/…, /app/uploads/…, etc.), streams the file if found, sets Content-Type: application/pdf, Cache-Control: no-store, security headers, etc.	✅ File-streaming logic is solid—your curl test returned HTTP 200 with the right headers.
Static serving	Vite’s serveStatic on client/dist handles /assets and fallback to index.html.	✅ Works for all built assets—except the PDF worker.
Worker configuration	In client/src/lib/setupPdfWorker.ts you hard-code:	

ts
Copy
Edit
pdfjs.GlobalWorkerOptions.workerSrc = 'https://unpkg.com/pdfjs-dist@4.8.69/build/pdf.worker.min.js'
with a local fallback to Cloudflare. | ❌ In production, that CDN fetch is blocked by CORS (or 404s if the version drifts). PDF.js bails into “fake worker” mode, so it never actually requests your /api/documents/…/download stream—hence the spinner. |
| Local copies | You also have public/pdf.worker.min.js and src/assets/pdf.worker.min.js (but those are from a different version, e.g. 4.10.38), which get served as HTML by your static handler. | ❌ MIME-type mismatch + version mismatch (API 4.8.69 vs Worker 4.10.38) breaks everything. |

2. Modular, production-ready redesign
Pin one PDF.js version
In root package.json (or client’s if you split it out), set

json
Copy
Edit
"dependencies": {
  "react-pdf": "^9.2.1",
  "pdfjs-dist": "4.8.69"
}
Then npm install. This makes your API and worker share one exact version.

Remove manual copies and CDN overrides

Delete all pdf.worker.min.js files from client/src/assets/ and client/public/.

Delete any lines in code that set pdfjs.GlobalWorkerOptions.workerSrc to a CDN URL or to those manual files—leaving only one setup file.

Bundle the worker via your build
Create (or overwrite) client/src/lib/setupPdfWorker.ts:

ts
Copy
Edit
import { pdfjs } from 'react-pdf';
import workerUrl from 'pdfjs-dist/build/pdf.worker.min.js?url';
// This ?url import tells Vite to copy the worker into dist/assets
pdfjs.GlobalWorkerOptions.workerSrc = workerUrl;
console.log('✅ PDF.js worker configured as:', workerUrl);
Why? Vite’s ?url loader emits the exact pdf.worker.min.js that matches your installed pdfjs-dist and returns the correct hashed path (e.g. /assets/pdf.worker.ab12cd34.js).

Import that setup exactly once
In client/src/main.tsx (before any <Document> usage):

ts
Copy
Edit
import './lib/setupPdfWorker';
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
// …rest of your bootstrap…
Ensure your server serves the built assets
In server/vite.ts, confirm you have:

ts
Copy
Edit
app.use(express.static(distPath));        // serves /assets/pdf.worker.*.js
app.use('*', (_req, res) => res.sendFile(path.join(distPath, 'index.html')));
This guarantees that a request to /assets/pdf.worker.*.js returns the real JS file (MIME application/javascript), never index.html.

Rebuild & redeploy

bash
Copy
Edit
npm run build      # builds client/dist and bundles server
npm start          # or your production start script
Smoke-test in the browser

Network tab → filter “pdf.worker” → you should see a 200 for /assets/pdf.worker.<hash>.js with Content-Type: application/javascript.

Console → no “fake worker” warnings, no CORS or MIME-type errors.

UI → PDFs render their pages instead of spinning indefinitely.

3. Comprehensive fix checklist
 Version lock – pdfjs-dist@4.8.69 (or whichever you choose) in package.json

 Cleanup – remove every pdf.worker.min.js in public/ or src/assets/

 Remove overrides – delete all CDN lines from your code

 One-time worker setup – implement setupPdfWorker.ts with ?url import

 Single import – only import setupPdfWorker.ts in main.tsx

 Static serving – verify Express’s express.static(distPath) is before your catch-all

 Rebuild – npm run build & restart the server

 Verify – network/console/UI checks as above

 Persistent storage – confirm uploaded files live in a non-ephemeral directory (e.g. data/uploads/) so downloads never 404

 Error paths – test a missing document ID to ensure you get your custom 404 JSON (not an HTML page)

Once you’ve run through this list, your entire pipeline—upload, DB, download, PDF worker, rendering—will be aligned, version-matched, and delivered from your own origin with the correct headers. Let me know how it goes, and we can tackle any leftover edge cases!








