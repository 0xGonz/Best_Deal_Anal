ProtectedRoute /deals/:id: Rendering component for user Gonz
Query fetch request: /api/notifications 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Query fetch request: /api/notifications/unread-count 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
UserAvatar: User 4 has color #D32F2F
Avatar color changed to: null
Query fetch request: /api/auth/me 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Query fetch request: /api/deals 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Query fetch request: /api/funds 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Query fetch request: /api/deals/86 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Query fetch request: /api/deals/86/stars 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
ProtectedRoute for /deals/:id: isLoading=false, user=Gonz
ProtectedRoute /deals/:id: Rendering component for user Gonz
Avatar color changed to: #D32F2F
Query Response from /api/notifications/unread-count: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/notifications/unread-count: 
Object {count: 0}
Query Response from /api/notifications: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/notifications: 
Array []
Using /me endpoint data for avatar 
Object {id: 4, username: "Gonz", fullName: "Brett Gonzalez", initials: "BG", email: "bgonzalez@doliveradvisors.com", â€¦}
Query Response from /api/funds: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/funds: 
(2) [{â€¦}, {â€¦}]
Query Response from /api/auth/me: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/auth/me: 
Object {id: 4, username: "Gonz", fullName: "Brett Gonzalez", initials: "BG", email: "bgonzalez@doliveradvisors.com", â€¦}
Query Response from /api/deals: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/deals: 
(83) [{â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}, {â€¦}]
Query Response from /api/deals/86/stars: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/deals/86/stars: 
Array []
Query Response from /api/deals/86: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/deals/86: 
Object {id: 86, name: "Syntrillo", description: "Biotech startup to detect stroke using risk fcators", sector: "Biotech", stage: "screening", â€¦}
UserAvatar: User 4 has color #D32F2F
Query fetch request: /api/documents/deal/86 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
Using /me endpoint data for avatar 
Object {id: 4, username: "Gonz", fullName: "Brett Gonzalez", initials: "BG", email: "bgonzalez@doliveradvisors.com", â€¦}
Query Response from /api/documents/deal/86: 
Object {status: 200, statusText: "OK", ok: true}
Query data received from /api/documents/deal/86: 
Array [{â€¦}]
Warning: Setting up fake worker.
Warning: Error: Setting up fake worker failed: "Failed to fetch dynamically imported module: https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/pdf.worker.js?import".
at t.value (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:17465)
at new t (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:12630)
at t.value (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:32766)
at https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:34400
Error loading PDF: 
Error {}

at t.value (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:17465)
at new t (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:12630)
at t.value (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:32766)
at https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:34400
Warning: Options prop passed to <Document /> changed, but it's equal to previous one. This might result in unnecessary reloads. Consider memoizing the value passed to "options" prop.
at t.value (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:17465)
at new t (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:12630)
at t.value (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:32766)
at https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:34400
ProtectedRoute for /deals/:id: isLoading=false, user=Gonz
ProtectedRoute /deals/:id: Rendering component for user Gonz
ProtectedRoute for /deals/:id: isLoading=false, user=Gonz
ProtectedRoute /deals/:id: Rendering component for user Gonz
Using /me endpoint data for avatar 
Object {id: 4, username: "Gonz", fullName: "Brett Gonzalez", initials: "BG", email: "bgonzalez@doliveradvisors.com", â€¦}


ChatGPT said:
Thanks Brett â€” this confirms the same root issue we saw earlier is still affecting your PDF rendering in Replit's browser sandbox. Hereâ€™s a consolidated breakdown of whatâ€™s going wrong and how to fix it.

ðŸ”¥ Critical Error
javascript
Copy
Edit
Error: Setting up fake worker failed: 
"Failed to fetch dynamically imported module: /pdf.worker.js?import"
This means:

react-pdf (using pdfjs-dist) is trying to dynamically import the worker.

But Replit does not support dynamic imports from CDN paths like /pdf.worker.js?import inside a sandboxed deployment.

As a result, the PDF renders momentarily (if cached), then crashes and disappears when trying to render further pages.

âœ… Fix: Use Static PDF Worker Path
You need to manually set the pdfjs worker to a static local path in your setupPdfWorker.ts.

Step-by-step:
Download the correct worker locally (only once):

In your Replit shell:

bash
Copy
Edit
mkdir -p public
wget https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.js -O public/pdf.worker.js
This puts the correct worker at:

arduino
Copy
Edit
public/pdf.worker.js
Update your setupPdfWorker.ts

ts
Copy
Edit
// client/src/lib/setupPdfWorker.ts
import { pdfjs } from 'react-pdf';

// Set to static path
pdfjs.GlobalWorkerOptions.workerSrc = '/pdf.worker.js';
Ensure this is imported early in your app:

ts
Copy
Edit
// client/src/main.tsx
import './lib/setupPdfWorker'; // must come before any <Document />
ðŸ§  Bonus: Improve Stability & User Feedback
In PdfViewer.tsx, wrap the <Document /> with error handling:

tsx
Copy
Edit
<Document
  file={fileUrl}
  onLoadError={(err) => {
    toast({
      title: 'PDF Load Failed',
      description: 'The file could not be rendered. Try re-uploading.',
      variant: 'destructive',
    });
    console.error('PDF Error', err);
  }}
/>
âœ… Once Done, You Should See:
PDF documents render properly and persist across reloads

No more MissingPDFException or fake worker logs

Drag-and-drop document uploads continue working

Consistent document visibility across devices (Mac + PC)

