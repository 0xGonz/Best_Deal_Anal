You’re almost there—your setup is correctly loading a local worker, but it’s still coming from a different version than your runtime API code. PDF.js will refuse to work if the “API” (the version bundled into react-pdf/pdfjs-dist that you import into your components) doesn’t exactly match the “Worker” version. Here’s the last bit to get them in lockstep:

1. Pick one version and pin it
Decide whether you want to run 4.8.69 or 4.10.38 everywhere. Then, in your client package.json, force that version for pdfjs-dist:

jsonc
Copy
Edit
// client/package.json
{
  "dependencies": {
    // ...other deps...
    "pdfjs-dist": "4.10.38"    // ← make this match the worker version you’ll bundle
  }
}
Run from client/:

bash
Copy
Edit
npm install
This ensures that when you do:

ts
Copy
Edit
import { Document } from 'react-pdf';
import { GlobalWorkerOptions } from 'pdfjs-dist';
both the API code and the worker file come from the same 4.10.38 package.

2. Bundle the worker via Vite
In client/src/lib/setupPdfWorker.ts, import the worker from that exact version:

ts
Copy
Edit
import { GlobalWorkerOptions } from 'pdfjs-dist';
import workerUrl from 'pdfjs-dist/build/pdf.worker.min.js?url';

GlobalWorkerOptions.workerSrc = workerUrl;
Because you pinned pdfjs-dist@4.10.38, Vite’s ?url loader will pull in that worker file, so both sides match.

3. Remove all other overrides
Search your code for any other GlobalWorkerOptions.workerSrc = … lines (especially in your viewer components) and delete them. You want one source of truth—only your setupPdfWorker.ts.

4. Rebuild & Redeploy
bash
Copy
Edit
cd client
npm run build
# then restart/redeploy your server so it serves the new client build
5. Verify
In DevTools → Network, find /assets/pdf.worker.*.js → it should come in as application/javascript with a 200.

Console → no more “version mismatch” or “fake worker” warnings.

UI → PDF loads straight away.

Once those versions align exactly, PDF.js will spin up a real worker and fetch your /api/documents/.../download stream immediately. Let me know when it’s up and running!