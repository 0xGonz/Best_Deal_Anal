6 potential vulnerabilities found.
Last ran on
 
1:40 pm, Jun 11, 2025
Detected potential vulnerability in .env.example
A gitleaks openai-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).
.env.example
OPENAI_API_KEY=sk-your-openai-api-key
Detected potential vulnerability in server/routes/allocations.ts
Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.
server/routes/allocations.ts
        sanitizedUpdates[field] = Number(updates[field]) || 0;
Detected potential vulnerability in server/routes/allocations.ts
Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.
server/routes/allocations.ts
          sanitizedUpdates[field] = new Date(dateValue);
Detected potential vulnerability in server/routes/allocations.ts
Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.
server/routes/allocations.ts
          sanitizedUpdates[field] = dateValue;
Detected potential vulnerability in server/routes/allocations.ts
Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.
server/routes/allocations.ts
          sanitizedUpdates[field] = dateValue;
Detected potential vulnerability in server/routes/allocations.ts
Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.
server/routes/allocations.ts
        sanitizedUpdates[field] = updates[field];