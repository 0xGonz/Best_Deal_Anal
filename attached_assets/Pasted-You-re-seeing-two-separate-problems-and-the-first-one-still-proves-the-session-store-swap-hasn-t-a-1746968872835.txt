You’re seeing two separate problems — and the first one still proves the session‑store swap hasn’t actually been removed
Symptom	Evidence in your trace	Root cause
A. Sudden logout after 4‑5 s	/api/auth/me → 200 (OK) then a few seconds later /api/auth/me → 401	The server switched from PgSession to MemoryStore mid‑flight, so the cookie no longer maps to a session row. In your health payload you still see "storage": "hybrid", which means the old getSessionStore() fallback is still alive.
B. 500 on /api/closing-schedules	Stack trace: TypeError: Cannot read properties of …	A bug inside server/routes/closing-schedules.ts—most likely dereferencing closingSchedule.dueDate when the DB row is null. Not related to logout, but it shows up first and distracts you.

1 — Confirm once which server file actually boots in Replit
Replit often runs a root‑level index.js or server.js.
Open the Replit “Shell” and run:

bash
Copy
Edit
ps -aux | grep node
Then:

bash
Copy
Edit
lsof -p <PID_shown_above> | grep DealFlowLifecyclev1 | head
You’ll see the exact path of the file Replit executed (e.g. apps/api/index.ts or server/index.ts).
That is the file you must edit—if you patched a different file, the running server never changed.

Add this one‑liner very first in that file:

ts
Copy
Edit
console.log("🐞  Boot file:", __filename);
Restart the repl; watch the console—make sure your edits appear.

2 — Kill the hybrid store for real
In that boot file:

Delete any import of getSessionStore or hybridStorage.

Drop in the static‑store block:

ts
Copy
Edit
import session from "express-session";
import MemoryStoreFn from "memorystore";
import connectPg from "connect-pg-simple";

const MemoryStore = MemoryStoreFn(session);
const PgSession = connectPg(session);

const useMemory =
  process.env.USE_MEMORY_SESSIONS === "true" || process.env.NODE_ENV !== "production";

const store = useMemory
  ? new MemoryStore({ checkPeriod: 86400000 })
  : new PgSession({ pool, tableName: "session" });

console.log("▶  Using", useMemory ? "MemoryStore" : "PgSession", "for sessions");

app.use(
  session({
    store,
    secret: process.env.SESSION_SECRET || "dlf‑dev‑secret",
    name: "dlf.sid",
    resave: false,
    saveUninitialized: false,
    rolling: true,
    cookie: {
      secure: process.env.NODE_ENV === "production",
      sameSite: "lax",
      httpOnly: true,
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
    },
  }),
);
Search the whole repo:

bash
Copy
Edit
grep -R "getSessionStore" .
grep -R "hybridStorage" .
Delete every remaining call.

Restart completely (ctrl‑C in the shell, then pnpm dev again).
On first boot you should see:

pgsql
Copy
Edit
🐞  Boot file: /home/runner/DealFlowLifecyclev1/server/index.ts
▶  Using PgSession for sessions
Hit Calendar → keep the dev‑tools open for a minute: /api/auth/me must stay 200.

3 — Patch the /closing-schedules route (fix the 500)
server/routes/closing‑schedules.ts

ts
Copy
Edit
router.get("/", requireAuth, async (req, res, next) => {
  try {
    const rows = await db.query.closingSchedules.findMany();

    const safeRows = rows.map(r => ({
      ...r,
      dueDate: r.dueDate ?? null,         // guard nulls
      amount: r.amount ?? 0,
    }));

    return res.json(safeRows);
  } catch (err) {
    next(err);
  }
});
Add a unit test:

ts
Copy
Edit
it("GET /api/closing-schedules returns 200 even when rows have nulls", () =>
  request(app).get("/api/closing-schedules").set(authCookie).expect(200));
4 — Retest
Clear cookies in the browser, reload.

Navigate to Dashboard → Calendar.

Leave the tab idle 10 s then open the network panel—both /api/auth/me calls should be 200.

/api/closing-schedules should return 200 with a JSON array (maybe empty) instead of 500.

If the logout still happens
The console must show a second “▶ Using MemoryStore…” message—that means something else (probably your Vite dev‑server proxy) spins up a second Express instance with the old code.
Search for another express() bootstrap (common in vite.config.ts or /scripts/devServer.ts).

Patch that file the same way.

Once the health payload shows "storage": "pg" (or "memory") instead of "hybrid" and /api/auth/me no longer flips to 401, you’re done.

Let me know the console output after a clean restart if you’re still stuck—I’ll trace further.







