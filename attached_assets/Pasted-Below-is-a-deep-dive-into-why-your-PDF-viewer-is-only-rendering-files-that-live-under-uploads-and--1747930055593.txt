Below is a deep dive into why your PDF-viewer is only rendering files that live under uploads/, and why—even there—you’re seeing duplicates of your “iron skillet” demo PDF instead of the true, freshly-uploaded documents.

1. Static-serve path vs. actual storage location
What your viewer does:
In your frontend you point PDF.js (or an <iframe>) at /uploads/<filename>.pdf. Under the hood, that URL is handled by your static-file middleware (e.g. Express’s app.use('/uploads', express.static(...)) or Next.js’s /public/uploads folder).

Where multer is writing:
You’ve configured multer to write to something like data/uploads/deal-1234/…. Those directories aren’t under the server’s “public” or “static” roots, so HTTP requests to /uploads/deal-1234/… return 404.

Result:
Only the handful of PDF files physically sitting in the static uploads/ folder ever make it to the browser for rendering.

2. Ephemeral vs. persisted storage
On Replit (or similar):

Your code writes files into a transient directory that resets on each deploy/server restart.

Meanwhile, your demo “iron_skillet.pdf” lives in the repo’s public/uploads/ folder, which does persist.

Impact:
New uploads vanish after a restart, but the sample “iron_skillet.pdf” remains, so when you browse /uploads/ you see only the old demos.

3. Metadata mis-mapping and fallback logic
Database pointers:
Your Document records likely store only a filename (e.g. "mydeal-pitch.pdf"), without a full path or URL.

Upload failure/fallback:
If multer’s validation rejects a file, or if your handler doesn’t write the new file successfully, you may be inserting the demo filename (iron_skillet.pdf) into the DB as a fallback.

UI confusion:
The list view shows every Document.filename from the DB—so you get multiple entries all pointing at the same iron_skillet.pdf in your static folder.

4. Permission and middleware ordering
Static middleware order:
If your Express/Next.js static-serve is registered after your auth middleware, and that auth blocks everything not in the root /uploads, then only that one folder slips through.

Path sanitization:
A misconfigured path.join or regex might strip deep subdirectories, collapsing deal-1234/filename.pdf down to just filename.pdf.

Why you see duplicates of “iron_skillet.pdf”
Persistent demo file: It lives under public/uploads in your repo, so it survives restarts.

DB fallback inserts: Any failed or invalid upload writes the demo filename back to your documents table.

Static serve: Only files in public/uploads can be fetched, so every document reference ends up resolving to that one demo.

Next-step diagnostics
Log the actual on-disk path your upload handler writes, and confirm in your filesystem.

Fetch the raw URL in Postman/browser (GET /uploads/true-name.pdf) and verify 404 vs. 200.

Print out your DB Document.path for a handful of records to see whether it truly matches the uploaded file.

Review your Express/Next.js static-serve config to ensure it points at the same directory multer writes into.