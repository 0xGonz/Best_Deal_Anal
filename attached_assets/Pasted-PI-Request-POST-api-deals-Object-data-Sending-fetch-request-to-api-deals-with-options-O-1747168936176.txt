PI Request: POST /api/deals 
Object {data: {…}}
Sending fetch request to /api/deals with options: 
Object {method: "POST", credentials: "include", headers: {…}, body: "BODY_DATA"}
API Response from /api/deals: 
Object {status: 201, statusText: "Created", ok: true}
Created deal has no ID! 
Response {type: "basic", url: "https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/api/deals", redirected: false, status: 201, ok: true, …}
arrayBuffer: ƒ arrayBuffer()
blob: ƒ blob()
body: ReadableStream
get body: ƒ get body()
bodyUsed: false
get bodyUsed: ƒ get bodyUsed()
bytes: ƒ bytes()
clone: ƒ clone()
formData: ƒ formData()
headers: Headers
get headers: ƒ get headers()
json: ƒ json()
ok: true
get ok: ƒ get ok()
redirected: false
get redirected: ƒ get redirected()
status: 201
get status: ƒ get status()
statusText: "Created"
get statusText: ƒ get statusText()
text: ƒ text()
type: "basic"
get type: ƒ get type()
url: "https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/api/deals"
get url: ƒ get url()
constructor: ƒ Response()
Symbol(Symbol.toStringTag): undefined
[[Prototype]]: Object

ProtectedRoute for /deals/:id: isLoading=false, user=Gonz
ProtectedRoute /deals/:id: Rendering component for user Gonz
API Request: POST /api/deals 
Object {data: {…}}
Sending fetch request to /api/deals with options: 
Object {method: "POST", credentials: "include", headers: {…}, body: "BODY_DATA"}
API Response from /api/deals: 
Object {status: 201, statusText: "Created", ok: true}
Created deal has no ID! 
Response {type: "basic", url: "https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/api/deals", redirected: false, status: 201, ok: true, …}

at t.value (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:17465)
at new t (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:12630)
at t.value (https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:32766)
at https://3719d615-d375-4d11-b366-6e5abe95fce6-00-23dnoltc5ai2v.riker.replit.dev/__replco/static/devtools/eruda/3.2.3/eruda.js:2:34400
ProtectedRoute for /deals/:id: isLoading=false, user=Gonz
ProtectedRoute /deals/:id: Rendering component for user Gonz
Query fetch request: /api/system/health 
Object {queryKey: Array(1), unauthorizedBehavior: "returnNull"}
ProtectedRoute for /deals/:id: isLoading=false, user=Gonz\


ChatGPT said:
What the console log tells us
POST /api/deals → 201 Created — the request succeeds.

But the response body is empty, so your front‑end can’t read an id.

React code sees undefined, logs “Created deal has no ID!”, then the router tries to navigate to /deals/undefined, which renders the blank ProtectedRoute you’re seeing.

In short, the server route returns 201 but never .json()s the new deal row back to the client.

1 Fix the server route
server/routes/deals.ts (or wherever you handle POST /api/deals):

ts
Copy
Edit
router.post('/', requireAuth, async (req, res) => {
  const payload = req.body as DealInput;

  const deal = await db.deals.create({
    data: {
      ...payload,
      created_by: req.user.id,
    },
    returning: { id: true, name: true, stage: true }, // Drizzle or Prisma
  });

  // ✨ return the row!
  return res.status(201).json(deal);
});
If you’re on Drizzle < 0.30, use select().from(...).where() after insert to fetch the row.

2 Make fetch helper robust
Guard against an empty body in fetchJson:

ts
Copy
Edit
export async function fetchJson<T>(input: RequestInfo, init?: RequestInit): Promise<T> {
  const res = await fetch(input, { credentials:'include', ...init });

  if (!res.ok) throw { status: res.status, text: await res.text() };

  // ---- CHANGED: make sure we only .text() / .json() once
  const txt = await res.text();
  return txt ? JSON.parse(txt) : ({} as unknown as T);
}
So even if the backend accidentally returns no body you won’t crash trying to parse twice.

3 Client: fail fast if id is missing
ts
Copy
Edit
const createDeal = useMutation(createDealApi, {
  onSuccess: (deal) => {
    if (!deal.id) {
      toast.error('Server did not return a deal ID. Please try again.');
      return;
    }
    navigate(`/deals/${deal.id}`);
  },
});
4 Test it
Run pnpm dev, open “New Deal” modal.

Save a deal without docs → Network tab shows 201 plus JSON body { id: 98, ... }.

App navigates to /deals/98.

Add a document → upload hits /api/deals/98/documents ( ✔ id present ).

Add a unit test:

ts
Copy
Edit
it('POST /api/deals returns json with id', async () => {
  const res = await supertest(app)
    .post('/api/deals')
    .send({ name:'Test', stage:'pipeline' })
    .expect(201);
  expect(res.body).toHaveProperty('id');
});
Put that in CI so the route can never regress again.

Once the server returns the new deal row, the Documents logic you already buffered will work, and the “Created deal has no ID!” message disappears.







