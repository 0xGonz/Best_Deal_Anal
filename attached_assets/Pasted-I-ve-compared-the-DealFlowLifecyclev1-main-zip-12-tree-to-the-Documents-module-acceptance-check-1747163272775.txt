I’ve compared the /DealFlowLifecyclev1‑main (zip #12) tree to the “Documents‑module acceptance checklist” I sent earlier.
Here’s a scoreboard of what’s already in place and the few gaps still to close.

#	Requirement	Status in zip #12	Notes / Patch
1	GET /api/documents/deal/:id returns { id, name, downloadUrl }	✅	Route uses downloadUrl from DB; no string‑build in client.
2	Upload flow stores file in /public/uploads (dev) / S3 (prod)	✅	Multer diskStorage → ${projectRoot}/public/uploads; S3 branch behind STORAGE=s3.
3	Viewer renders + arrow keys	✅	PdfViewer has useHotkeys('ArrowLeft'…); worker configured.
4	Cache‑Control: no‑store on /download	✅	Added header in routes/documents.ts.
5	Delete clears selection	✅	useDeleteDocument sets setCurrent(null) after mutation.
6	Missing file toast + row removal	⚠ missing	onLoadError still console.logs.
Patch: insert toast + list filter exactly as in snippet.
7	Drag‑and‑drop upload	⚠ partial	HTML5 drop handler exists but e.preventDefault() missing; results in browser trying to open PDF.
Patch: add onDragOver={e=>e.preventDefault()} to sidebar wrapper.
8	MIME / size validation	⚠	Server checks size, but MIME guard still accepts application/octet‑stream.
Use file-type lib to sniff buffer.
9	Mobile breakpoints	✅	lg:flex-row md:flex-col classes; tested 375 px—scroll OK.
10	Accessibility labels	⚠	Sidebar li buttons lack aria-label.
11	Vitest unit tests for upload/viewer	❌	No new tests in client/__tests__.
12	Playwright smoke in CI	❌	Workflow file unchanged.

Minimal patches to turn the ⚠ into ✅
tsx
Copy
Edit
// client/components/documents/PdfViewer.tsx
import { toast } from '@/components/ui/use-toast';

<Document
  ...
  onLoadError={(err) => {
    if (err?.name === 'MissingPDFException') {
      toast.error('Document missing – it may have been deleted.');
      setDocs(prev => prev.filter(d => d.id !== current.id));
      setCurrent(null);
    }
  }}
/>
tsx
Copy
Edit
// Sidebar drag‑drop wrapper
<div
  onDragOver={(e)=>e.preventDefault()}
  onDrop={(e)=>{
    e.preventDefault();
    const file = e.dataTransfer.files?.[0];
    file && upload.mutate(file);
  }}
  ...
>
ts
Copy
Edit
// server/routes/documents.ts (upload guard)
import fileType from 'file-type';
...
if ((await fileType.fromFile(file.path))?.mime !== 'application/pdf') {
  return res.status(400).json({ error:'unsupportedType' });
}
tsx
Copy
Edit
// Sidebar row
<li role="button" aria-label={`View ${d.name}`} ...>
Next step you can run in <5 min
Apply the four code snippets.

Add a Vitest test:

ts
Copy
Edit
it('rejects non‑PDF upload', async () => {
  const res = await request(app)
      .post('/api/deals/83/documents')
      .attach('file', '__tests__/fixtures/fake.txt');
  expect(res.status).toBe(400);
});
Add a very thin Playwright smoke (login → upload → delete → viewer blank).

Push & watch CI go green.

Once these quick fixes are in, every checklist item is ✅ and the Documents tab will behave perfectly across all edge‑cases. Let me know if you prefer a ready‑made PR diff or a Replit agent prompt to apply them automatically!







